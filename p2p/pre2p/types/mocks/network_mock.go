// Code generated by MockGen. DO NOT EDIT.
// Source: p2p/pre2p/types/network.go

// Package mock_types is a generated GoMock package.
package mock_types

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/pokt-network/pocket/p2p/pre2p/types"
	crypto "github.com/pokt-network/pocket/shared/crypto"
	modules "github.com/pokt-network/pocket/shared/modules"
)

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// AddPeerToAddrBook mocks base method.
func (m *MockNetwork) AddPeerToAddrBook(peer *types.NetworkPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeerToAddrBook", peer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeerToAddrBook indicates an expected call of AddPeerToAddrBook.
func (mr *MockNetworkMockRecorder) AddPeerToAddrBook(peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeerToAddrBook", reflect.TypeOf((*MockNetwork)(nil).AddPeerToAddrBook), peer)
}

// GetAddrBook mocks base method.
func (m *MockNetwork) GetAddrBook() types.AddrBook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrBook")
	ret0, _ := ret[0].(types.AddrBook)
	return ret0
}

// GetAddrBook indicates an expected call of GetAddrBook.
func (mr *MockNetworkMockRecorder) GetAddrBook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrBook", reflect.TypeOf((*MockNetwork)(nil).GetAddrBook))
}

// GetBus mocks base method.
func (m *MockNetwork) GetBus() modules.Bus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBus")
	ret0, _ := ret[0].(modules.Bus)
	return ret0
}

// GetBus indicates an expected call of GetBus.
func (mr *MockNetworkMockRecorder) GetBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBus", reflect.TypeOf((*MockNetwork)(nil).GetBus))
}

// HandleNetworkData mocks base method.
func (m *MockNetwork) HandleNetworkData(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNetworkData", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleNetworkData indicates an expected call of HandleNetworkData.
func (mr *MockNetworkMockRecorder) HandleNetworkData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNetworkData", reflect.TypeOf((*MockNetwork)(nil).HandleNetworkData), data)
}

// NetworkBroadcast mocks base method.
func (m *MockNetwork) NetworkBroadcast(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkBroadcast", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkBroadcast indicates an expected call of NetworkBroadcast.
func (mr *MockNetworkMockRecorder) NetworkBroadcast(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkBroadcast", reflect.TypeOf((*MockNetwork)(nil).NetworkBroadcast), data)
}

// NetworkSend mocks base method.
func (m *MockNetwork) NetworkSend(data []byte, address crypto.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkSend", data, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkSend indicates an expected call of NetworkSend.
func (mr *MockNetworkMockRecorder) NetworkSend(data, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkSend", reflect.TypeOf((*MockNetwork)(nil).NetworkSend), data, address)
}

// RemovePeerToAddrBook mocks base method.
func (m *MockNetwork) RemovePeerToAddrBook(peer *types.NetworkPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeerToAddrBook", peer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePeerToAddrBook indicates an expected call of RemovePeerToAddrBook.
func (mr *MockNetworkMockRecorder) RemovePeerToAddrBook(peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeerToAddrBook", reflect.TypeOf((*MockNetwork)(nil).RemovePeerToAddrBook), peer)
}

// SetBus mocks base method.
func (m *MockNetwork) SetBus(arg0 modules.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus.
func (mr *MockNetworkMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockNetwork)(nil).SetBus), arg0)
}

// Start mocks base method.
func (m *MockNetwork) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNetworkMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNetwork)(nil).Start))
}

// Stop mocks base method.
func (m *MockNetwork) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNetworkMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetwork)(nil).Stop))
}

// MockTransportLayerConn is a mock of TransportLayerConn interface.
type MockTransportLayerConn struct {
	ctrl     *gomock.Controller
	recorder *MockTransportLayerConnMockRecorder
}

// MockTransportLayerConnMockRecorder is the mock recorder for MockTransportLayerConn.
type MockTransportLayerConnMockRecorder struct {
	mock *MockTransportLayerConn
}

// NewMockTransportLayerConn creates a new mock instance.
func NewMockTransportLayerConn(ctrl *gomock.Controller) *MockTransportLayerConn {
	mock := &MockTransportLayerConn{ctrl: ctrl}
	mock.recorder = &MockTransportLayerConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportLayerConn) EXPECT() *MockTransportLayerConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTransportLayerConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransportLayerConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransportLayerConn)(nil).Close))
}

// IsListener mocks base method.
func (m *MockTransportLayerConn) IsListener() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsListener")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsListener indicates an expected call of IsListener.
func (mr *MockTransportLayerConnMockRecorder) IsListener() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsListener", reflect.TypeOf((*MockTransportLayerConn)(nil).IsListener))
}

// Read mocks base method.
func (m *MockTransportLayerConn) Read() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTransportLayerConnMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTransportLayerConn)(nil).Read))
}

// Write mocks base method.
func (m *MockTransportLayerConn) Write(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTransportLayerConnMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTransportLayerConn)(nil).Write), arg0)
}
