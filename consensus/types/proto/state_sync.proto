syntax = "proto3";

// This file captures all the different messages types and data types related to State Sync.

package consensus;

option go_package = "github.com/pokt-network/pocket/consensus/types";

import "core/types/proto/block.proto";

// CONSIDERATION(#347): Once we integrate with libp2p, the definition of `peer_id` may change.
//                      At the moment it is the address of the peer, but is named `id` to be
//                      more general purpose. Reconsider this naming terminology if it's not
//                      explicit enough.

message StateSyncMetadataRequest {
    // CONSOLIDATE(#347): Integrate with LibP2P
    string peer_address = 1; // The peer id of the node that is requesting the metadata
}

message StateSyncMetadataResponse {
    string peer_address = 1; // The `peer_id` needs to be populated by the P2P module of the receiving node so the sender cannot falsify its identity
    uint64 min_height = 2; // The minimum height that a peer has in its BlockStore
    uint64 max_height = 3; // The maximum height that a peer has in its BlockStore
}

message GetBlockRequest {
    string peer_address = 1; // The peer id of the node that is requesting the metadata
    uint64 height = 2; // The height of the block being requested by the peer
}

message GetBlockResponse {
    string peer_address = 1; // The `peer_id` needs to be populated by the P2P module of the receiving node so the sender cannot falsify its identity
    core.Block block = 2; // The block being provided to the peer
}

message StateSyncMessage {
    oneof message {
        StateSyncMetadataRequest metadata_req = 2;
        StateSyncMetadataResponse metadata_res = 3;
        GetBlockRequest get_block_req = 4;
        GetBlockResponse get_block_res = 5;
    }
}

// NOT USED: This gRPC interface is **not being used at the moment**. It is in place simply as a
// guideline of what how the types in this file could be used if a direct synchronous communication
// between nodes were implemented. Furthermore, since the message types are used for asynchronous
// state syncing between nodes, it will enable most of the underlying business logic to be reused.
service StateSyncService {
    rpc GetStateSyncMetadata (StateSyncMetadataRequest) returns (StateSyncMetadataResponse);
    rpc GetBlock (GetBlockRequest) returns (GetBlockResponse);
}