// TODO(olshansky): This encapsulates hotstuff types, hotstuff messages and hotstuff specific crypto primitives. Consider if it's worth splitting into smaller files.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: hotstuff_types.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HotstuffStep int32

const (
	HotstuffStep_HOTSTUFF_STEP_UNKNOWN   HotstuffStep = 0
	HotstuffStep_HOTSTUFF_STEP_NEWROUND  HotstuffStep = 1
	HotstuffStep_HOTSTUFF_STEP_PREPARE   HotstuffStep = 2
	HotstuffStep_HOTSTUFF_STEP_PRECOMMIT HotstuffStep = 3
	HotstuffStep_HOTSTUFF_STEP_COMMIT    HotstuffStep = 4
	HotstuffStep_HOTSTUFF_STEP_DECIDE    HotstuffStep = 5
)

// Enum value maps for HotstuffStep.
var (
	HotstuffStep_name = map[int32]string{
		0: "HOTSTUFF_STEP_UNKNOWN",
		1: "HOTSTUFF_STEP_NEWROUND",
		2: "HOTSTUFF_STEP_PREPARE",
		3: "HOTSTUFF_STEP_PRECOMMIT",
		4: "HOTSTUFF_STEP_COMMIT",
		5: "HOTSTUFF_STEP_DECIDE",
	}
	HotstuffStep_value = map[string]int32{
		"HOTSTUFF_STEP_UNKNOWN":   0,
		"HOTSTUFF_STEP_NEWROUND":  1,
		"HOTSTUFF_STEP_PREPARE":   2,
		"HOTSTUFF_STEP_PRECOMMIT": 3,
		"HOTSTUFF_STEP_COMMIT":    4,
		"HOTSTUFF_STEP_DECIDE":    5,
	}
)

func (x HotstuffStep) Enum() *HotstuffStep {
	p := new(HotstuffStep)
	*p = x
	return p
}

func (x HotstuffStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HotstuffStep) Descriptor() protoreflect.EnumDescriptor {
	return file_hotstuff_types_proto_enumTypes[0].Descriptor()
}

func (HotstuffStep) Type() protoreflect.EnumType {
	return &file_hotstuff_types_proto_enumTypes[0]
}

func (x HotstuffStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HotstuffStep.Descriptor instead.
func (HotstuffStep) EnumDescriptor() ([]byte, []int) {
	return file_hotstuff_types_proto_rawDescGZIP(), []int{0}
}

type HotstuffMessageType int32

const (
	HotstuffMessageType_HOTSTUFF_MESSAGE_UNKNOWN HotstuffMessageType = 0
	HotstuffMessageType_HOTSTUFF_MESAGE_PROPOSE  HotstuffMessageType = 1
	HotstuffMessageType_HOTSTUFF_MESSAGE_VOTE    HotstuffMessageType = 2
)

// Enum value maps for HotstuffMessageType.
var (
	HotstuffMessageType_name = map[int32]string{
		0: "HOTSTUFF_MESSAGE_UNKNOWN",
		1: "HOTSTUFF_MESAGE_PROPOSE",
		2: "HOTSTUFF_MESSAGE_VOTE",
	}
	HotstuffMessageType_value = map[string]int32{
		"HOTSTUFF_MESSAGE_UNKNOWN": 0,
		"HOTSTUFF_MESAGE_PROPOSE":  1,
		"HOTSTUFF_MESSAGE_VOTE":    2,
	}
)

func (x HotstuffMessageType) Enum() *HotstuffMessageType {
	p := new(HotstuffMessageType)
	*p = x
	return p
}

func (x HotstuffMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HotstuffMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_hotstuff_types_proto_enumTypes[1].Descriptor()
}

func (HotstuffMessageType) Type() protoreflect.EnumType {
	return &file_hotstuff_types_proto_enumTypes[1]
}

func (x HotstuffMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HotstuffMessageType.Descriptor instead.
func (HotstuffMessageType) EnumDescriptor() ([]byte, []int) {
	return file_hotstuff_types_proto_rawDescGZIP(), []int{1}
}

// TODO(research): Until we figure out which library to use for threshold
// signatures, mimick the behaviour by looping over individual signatures.
type PartialSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PartialSignature) Reset() {
	*x = PartialSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hotstuff_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialSignature) ProtoMessage() {}

func (x *PartialSignature) ProtoReflect() protoreflect.Message {
	mi := &file_hotstuff_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialSignature.ProtoReflect.Descriptor instead.
func (*PartialSignature) Descriptor() ([]byte, []int) {
	return file_hotstuff_types_proto_rawDescGZIP(), []int{0}
}

func (x *PartialSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PartialSignature) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ThresholdSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*PartialSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *ThresholdSignature) Reset() {
	*x = ThresholdSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hotstuff_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThresholdSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdSignature) ProtoMessage() {}

func (x *ThresholdSignature) ProtoReflect() protoreflect.Message {
	mi := &file_hotstuff_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdSignature.ProtoReflect.Descriptor instead.
func (*ThresholdSignature) Descriptor() ([]byte, []int) {
	return file_hotstuff_types_proto_rawDescGZIP(), []int{1}
}

func (x *ThresholdSignature) GetSignatures() []*PartialSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// This is essentially a version of the hostuff message where the
// threshold signature MUST be defined.
type QuorumCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height             uint64              `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round              uint64              `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Step               HotstuffStep        `protobuf:"varint,3,opt,name=step,proto3,enum=consensus.HotstuffStep" json:"step,omitempty"`
	Block              *BlockConsensusTemp `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	ThresholdSignature *ThresholdSignature `protobuf:"bytes,5,opt,name=threshold_signature,json=thresholdSignature,proto3" json:"threshold_signature,omitempty"`
}

func (x *QuorumCertificate) Reset() {
	*x = QuorumCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hotstuff_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuorumCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumCertificate) ProtoMessage() {}

func (x *QuorumCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_hotstuff_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumCertificate.ProtoReflect.Descriptor instead.
func (*QuorumCertificate) Descriptor() ([]byte, []int) {
	return file_hotstuff_types_proto_rawDescGZIP(), []int{2}
}

func (x *QuorumCertificate) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *QuorumCertificate) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *QuorumCertificate) GetStep() HotstuffStep {
	if x != nil {
		return x.Step
	}
	return HotstuffStep_HOTSTUFF_STEP_UNKNOWN
}

func (x *QuorumCertificate) GetBlock() *BlockConsensusTemp {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *QuorumCertificate) GetThresholdSignature() *ThresholdSignature {
	if x != nil {
		return x.ThresholdSignature
	}
	return nil
}

type HotstuffMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   HotstuffMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=consensus.HotstuffMessageType" json:"type,omitempty"`
	Height uint64              `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Step   HotstuffStep        `protobuf:"varint,3,opt,name=step,proto3,enum=consensus.HotstuffStep" json:"step,omitempty"`
	Round  uint64              `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Block  *BlockConsensusTemp `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	// Types that are assignable to Justification:
	//	*HotstuffMessage_QuorumCertificate
	//	*HotstuffMessage_ThresholdSignature
	//	*HotstuffMessage_PartialSignature
	Justification isHotstuffMessage_Justification `protobuf_oneof:"justification"`
}

func (x *HotstuffMessage) Reset() {
	*x = HotstuffMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hotstuff_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotstuffMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotstuffMessage) ProtoMessage() {}

func (x *HotstuffMessage) ProtoReflect() protoreflect.Message {
	mi := &file_hotstuff_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotstuffMessage.ProtoReflect.Descriptor instead.
func (*HotstuffMessage) Descriptor() ([]byte, []int) {
	return file_hotstuff_types_proto_rawDescGZIP(), []int{3}
}

func (x *HotstuffMessage) GetType() HotstuffMessageType {
	if x != nil {
		return x.Type
	}
	return HotstuffMessageType_HOTSTUFF_MESSAGE_UNKNOWN
}

func (x *HotstuffMessage) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HotstuffMessage) GetStep() HotstuffStep {
	if x != nil {
		return x.Step
	}
	return HotstuffStep_HOTSTUFF_STEP_UNKNOWN
}

func (x *HotstuffMessage) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *HotstuffMessage) GetBlock() *BlockConsensusTemp {
	if x != nil {
		return x.Block
	}
	return nil
}

func (m *HotstuffMessage) GetJustification() isHotstuffMessage_Justification {
	if m != nil {
		return m.Justification
	}
	return nil
}

func (x *HotstuffMessage) GetQuorumCertificate() *QuorumCertificate {
	if x, ok := x.GetJustification().(*HotstuffMessage_QuorumCertificate); ok {
		return x.QuorumCertificate
	}
	return nil
}

func (x *HotstuffMessage) GetThresholdSignature() *ThresholdSignature {
	if x, ok := x.GetJustification().(*HotstuffMessage_ThresholdSignature); ok {
		return x.ThresholdSignature
	}
	return nil
}

func (x *HotstuffMessage) GetPartialSignature() *PartialSignature {
	if x, ok := x.GetJustification().(*HotstuffMessage_PartialSignature); ok {
		return x.PartialSignature
	}
	return nil
}

type isHotstuffMessage_Justification interface {
	isHotstuffMessage_Justification()
}

type HotstuffMessage_QuorumCertificate struct {
	QuorumCertificate *QuorumCertificate `protobuf:"bytes,6,opt,name=quorum_certificate,json=quorumCertificate,proto3,oneof"` // From NODE -> NODE when new rounds start; one of {HighQC, TimeoutQC, CommitQC}
}

type HotstuffMessage_ThresholdSignature struct {
	ThresholdSignature *ThresholdSignature `protobuf:"bytes,7,opt,name=threshold_signature,json=thresholdSignature,proto3,oneof"` // From LEADER -> REPLICA for PROPOSE messages;
}

type HotstuffMessage_PartialSignature struct {
	PartialSignature *PartialSignature `protobuf:"bytes,8,opt,name=partial_signature,json=partialSignature,proto3,oneof"` // From REPLICA -> LEADER for VOTE messages; signature over <height, round, block>
}

func (*HotstuffMessage_QuorumCertificate) isHotstuffMessage_Justification() {}

func (*HotstuffMessage_ThresholdSignature) isHotstuffMessage_Justification() {}

func (*HotstuffMessage_PartialSignature) isHotstuffMessage_Justification() {}

var File_hotstuff_types_proto protoreflect.FileDescriptor

var file_hotstuff_types_proto_rawDesc = []byte{
	0x0a, 0x14, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x1a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x51, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e, 0x0a,
	0x13, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd3, 0x03,
	0x0a, 0x0f, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x48, 0x6f, 0x74, 0x73,
	0x74, 0x75, 0x66, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4d, 0x0a, 0x12, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x51, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x12, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2a, 0xb1, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x54, 0x53, 0x54, 0x55, 0x46, 0x46,
	0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x54, 0x53, 0x54, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x4e, 0x45, 0x57, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x48,
	0x4f, 0x54, 0x53, 0x54, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x54, 0x53, 0x54, 0x55,
	0x46, 0x46, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x54, 0x53, 0x54, 0x55, 0x46, 0x46, 0x5f,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x48, 0x4f, 0x54, 0x53, 0x54, 0x55, 0x46, 0x46, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x44, 0x45, 0x10, 0x05, 0x2a, 0x6b, 0x0a, 0x13, 0x48, 0x6f, 0x74, 0x73, 0x74,
	0x75, 0x66, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x48, 0x4f, 0x54, 0x53, 0x54, 0x55, 0x46, 0x46, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x48, 0x4f, 0x54, 0x53, 0x54, 0x55, 0x46, 0x46, 0x5f, 0x4d, 0x45, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x54,
	0x53, 0x54, 0x55, 0x46, 0x46, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f,
	0x54, 0x45, 0x10, 0x02, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hotstuff_types_proto_rawDescOnce sync.Once
	file_hotstuff_types_proto_rawDescData = file_hotstuff_types_proto_rawDesc
)

func file_hotstuff_types_proto_rawDescGZIP() []byte {
	file_hotstuff_types_proto_rawDescOnce.Do(func() {
		file_hotstuff_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_hotstuff_types_proto_rawDescData)
	})
	return file_hotstuff_types_proto_rawDescData
}

var file_hotstuff_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hotstuff_types_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_hotstuff_types_proto_goTypes = []interface{}{
	(HotstuffStep)(0),          // 0: consensus.HotstuffStep
	(HotstuffMessageType)(0),   // 1: consensus.HotstuffMessageType
	(*PartialSignature)(nil),   // 2: consensus.PartialSignature
	(*ThresholdSignature)(nil), // 3: consensus.ThresholdSignature
	(*QuorumCertificate)(nil),  // 4: consensus.QuorumCertificate
	(*HotstuffMessage)(nil),    // 5: consensus.HotstuffMessage
	(*BlockConsensusTemp)(nil), // 6: consensus.BlockConsensusTemp
}
var file_hotstuff_types_proto_depIdxs = []int32{
	2,  // 0: consensus.ThresholdSignature.signatures:type_name -> consensus.PartialSignature
	0,  // 1: consensus.QuorumCertificate.step:type_name -> consensus.HotstuffStep
	6,  // 2: consensus.QuorumCertificate.block:type_name -> consensus.BlockConsensusTemp
	3,  // 3: consensus.QuorumCertificate.threshold_signature:type_name -> consensus.ThresholdSignature
	1,  // 4: consensus.HotstuffMessage.type:type_name -> consensus.HotstuffMessageType
	0,  // 5: consensus.HotstuffMessage.step:type_name -> consensus.HotstuffStep
	6,  // 6: consensus.HotstuffMessage.block:type_name -> consensus.BlockConsensusTemp
	4,  // 7: consensus.HotstuffMessage.quorum_certificate:type_name -> consensus.QuorumCertificate
	3,  // 8: consensus.HotstuffMessage.threshold_signature:type_name -> consensus.ThresholdSignature
	2,  // 9: consensus.HotstuffMessage.partial_signature:type_name -> consensus.PartialSignature
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_hotstuff_types_proto_init() }
func file_hotstuff_types_proto_init() {
	if File_hotstuff_types_proto != nil {
		return
	}
	file_block_cons_temp_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hotstuff_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hotstuff_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThresholdSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hotstuff_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuorumCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hotstuff_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotstuffMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hotstuff_types_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*HotstuffMessage_QuorumCertificate)(nil),
		(*HotstuffMessage_ThresholdSignature)(nil),
		(*HotstuffMessage_PartialSignature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hotstuff_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hotstuff_types_proto_goTypes,
		DependencyIndexes: file_hotstuff_types_proto_depIdxs,
		EnumInfos:         file_hotstuff_types_proto_enumTypes,
		MessageInfos:      file_hotstuff_types_proto_msgTypes,
	}.Build()
	File_hotstuff_types_proto = out.File
	file_hotstuff_types_proto_rawDesc = nil
	file_hotstuff_types_proto_goTypes = nil
	file_hotstuff_types_proto_depIdxs = nil
}
