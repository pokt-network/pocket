# Helm charts are used for the observability stack (Grafana, Prometheus, Postgres)
load("ext://helm_resource", "helm_resource", "helm_repo")
load("ext://namespace", "namespace_create")
load("ext://restart_process", "docker_build_with_restart")
load("ext://tests/golang", "test_go")
load("ext://syncback", "syncback")

tiltfile_dir = os.path.dirname(config.main_dir)
root_dir = os.path.dirname(tiltfile_dir + "/../..")
localnet_config_path = root_dir + "/localnet_config.yaml"

# Create localnet config file from defaults, and if some default configuration doesn't exist in it - populate with default values
localnet_config_defaults = {
    "validators": {"count": 4},
    "servicers": {"count": 1},
    "fishermen": {"count": 1},
    "full_nodes": {"count": 1},
}

localnet_config_file = read_yaml(localnet_config_path, default=localnet_config_defaults)

localnet_config = {}
localnet_config.update(localnet_config_defaults)
localnet_config.update(localnet_config_file)


# Create a default config file if it does not exist
if (localnet_config_file != localnet_config) or (
    not os.path.exists(localnet_config_path)
):
    print("Updating " + localnet_config_path + " with defaults")
    local("cat - > " + localnet_config_path, stdin=encode_yaml(localnet_config))

syncback(
    name="syncback_localnet_config",
    k8s_object="deploy/dev-cli-client",
    src_dir="/usr/local/",
    paths=["localnet_config.yaml"],
    target_dir=root_dir,
    labels=["watchers"],
)

# List of directories Tilt watches to trigger a hot-reload on changes.
# CONSIDERATION: This can potentially can be replaced with a list of excluded directories.
deps = [
    "app",
    "build/localnet",
    "build/debug.go",
    "consensus",
    "p2p",
    "persistance",
    "rpc",
    "runtime",
    "shared",
    "telemetry",
    "utility",
    "vendor",
    "logger",
]

deps_full_path = [root_dir + "/" + depdir for depdir in deps]


# Avoid downloading dependencies if no missing/outdated charts are found
def check_helm_dependencies_for_chart(path):
    check_helm_dependencies = local(
        "helm dependency list " + path + " | awk '{print $4}' | grep -Ev 'ok|STATUS'"
    )
    helm_dependencies_not_ok_count = len(str(check_helm_dependencies).splitlines())
    if helm_dependencies_not_ok_count > 1:
        local("helm dependency update " + path)


check_helm_dependencies_for_chart("dependencies")

k8s_yaml(helm("dependencies", name="dependencies"))
k8s_resource("dependencies-prometheus-pushgateway", labels=["monitoring"])
k8s_resource("dependencies-loki", labels=["monitoring"])
k8s_resource("dependencies-prometheus-node-exporter", labels=["monitoring"])
k8s_resource("dependencies-prometheus-alertmanager", labels=["monitoring"])
k8s_resource("dependencies-grafana", labels=["monitoring"])
k8s_resource("dependencies-kube-state-metrics", labels=["monitoring"])
k8s_resource("dependencies-promtail", labels=["monitoring"])
k8s_resource("dependencies-prometheus-server", labels=["monitoring"])


# Builds the pocket binary. Note target OS is linux, because no matter what your OS is, container runs linux natively or in VM.
local_resource(
    "pocket: Watch & Compile",
    "GOOS=linux go build -o {root_dir}/bin/pocket-linux {root_dir}/app/pocket/main.go".format(
        root_dir=root_dir
    ),
    deps=deps_full_path,
    labels=["watchers"],
)
local_resource(
    "debug client: Watch & Compile",
    "GOOS=linux go build -tags=debug -o {root_dir}/bin/p1-linux {root_dir}/app/client/*.go".format(
        root_dir=root_dir
    ),
    deps=deps_full_path,
    labels=["watchers"],
)
# Builds the cluster manager binary
local_resource(
    "cluster manager: Watch & Compile",
    "GOOS=linux go build -o {root_dir}/bin/cluster-manager {root_dir}/build/localnet/cluster-manager/*.go".format(
        root_dir=root_dir
    ),
    deps=deps_full_path,
    labels=["watchers"],
)

# Builds and maintains the pocket container image after the binary is built on local machine, restarts a process on code change
docker_build_with_restart(
    "pocket-image",
    root_dir,
    dockerfile_contents="""FROM debian:bullseye
COPY bin/pocket-linux /usr/local/bin/pocket
WORKDIR /
""",
    only=["./bin/pocket-linux"],
    entrypoint=[
        "/usr/local/bin/pocket",
        "-config=/pocket/configs/config.json",
        "-genesis=/pocket/configs/genesis.json",
    ],
    live_update=[sync("bin/pocket-linux", "/usr/local/bin/pocket")],
)

# Builds and maintains the client container image after the binary is built on local machine
docker_build_with_restart(
    "client-image",
    root_dir,
    dockerfile_contents="""FROM debian:bullseye
RUN apt-get update && apt-get install -y procps bash-completion jq
RUN echo "source /etc/bash_completion" >> ~/.bashrc
# tail -n +2 removes the first line of the completion script since the CLI spits out some logs
RUN echo "source <(p1 completion bash | tail -n +2)" >> ~/.bashrc
WORKDIR /root
COPY bin/p1-linux /usr/local/bin/p1
COPY localnet_config.yaml /usr/local/localnet_config.yaml
""",
    only=["bin/p1-linux", localnet_config_path],
    entrypoint=["sleep", "infinity"],
    live_update=[
        sync("bin/p1-linux", "/usr/local/bin/p1"),
        sync(localnet_config_path, "/usr/local/localnet_config.yaml"),
    ],
)

# Builds and maintains the cluster-manager container image after the binary is built on local machine
docker_build_with_restart(
    "cluster-manager-image",
    root_dir,
    dockerfile_contents="""FROM debian:bullseye
WORKDIR /
COPY bin/cluster-manager /usr/local/bin/cluster-manager
COPY bin/p1-linux /usr/local/bin/p1
""",
    only=["bin/cluster-manager", "bin/p1-linux"],
    entrypoint=["/usr/local/bin/cluster-manager"],
    live_update=[
        sync("bin/cluster-manager", "/usr/local/bin/cluster-manager"),
        sync("bin/p1-linux", "/usr/local/bin/p1"),
    ],
)

# Pushes localnet manifests to the cluster.
k8s_yaml(
    [
        "manifests/private-keys.yaml",
        "manifests/configs.yaml",
        "manifests/network.yaml",
        "manifests/roles.yaml",
        "manifests/service-accounts.yaml",
        "manifests/role-bindings.yaml",
    ]
)

k8s_yaml(["manifests/cli-client.yaml"])
k8s_resource("dev-cli-client", labels=["client"])
k8s_yaml(["manifests/cluster-manager.yaml"])
k8s_resource("pocket-v1-cluster-manager", labels=["cluster-manager"])

chart_dir = root_dir + "/charts/pocket"
check_helm_dependencies_for_chart(chart_dir)


def formatted_actor_number(n):
    return local('printf "%03d" ' + str(n))


# Provisions validators
actor_number = 0
for x in range(localnet_config["validators"]["count"]):
    actor_number = actor_number + 1
    formatted_number = formatted_actor_number(actor_number)

    k8s_yaml(
        helm(
            chart_dir,
            name="validator-%s-pocket" % formatted_number,
            set=[
                "global.postgresql.auth.postgresPassword=LocalNetPassword",
                "image.repository=pocket-image",
                "privateKeySecretKeyRef.name=validators-private-keys",
                "privateKeySecretKeyRef.key=%s" % formatted_number,
                "genesis.preProvisionedGenesis.enabled=false",
                "genesis.externalConfigMap.name=v1-localnet-genesis",
                "genesis.externalConfigMap.key=genesis.json",
                "postgresql.primary.persistence.enabled=false",
                "podAnnotations.prometheus\\.io/scrape=true",
                "podAnnotations.prometheus\\.io/port=9000",
                "nodeType=validator",
            ],
            values=[chart_dir + "/pocket-validator-overrides.yaml"]
            if os.path.exists(chart_dir + "/pocket-validator-overrides.yaml")
            else [],
        )
    )
    k8s_resource("validator-%s-pocket" % formatted_number, labels=["pocket-validators"])

# Provisions servicer nodes
actor_number = 0
for x in range(localnet_config["servicers"]["count"]):
    actor_number = actor_number + 1
    formatted_number = formatted_actor_number(actor_number)

    k8s_yaml(
        helm(
            chart_dir,
            name="servicer-%s-pocket" % formatted_number,
            set=[
                "global.postgresql.auth.postgresPassword=LocalNetPassword",
                "image.repository=pocket-image",
                "privateKeySecretKeyRef.name=servicers-private-keys",
                "privateKeySecretKeyRef.key=%s" % formatted_number,
                "genesis.preProvisionedGenesis.enabled=false",
                "genesis.externalConfigMap.name=v1-localnet-genesis",
                "genesis.externalConfigMap.key=genesis.json",
                "postgresql.primary.persistence.enabled=false",
                "podAnnotations.prometheus\\.io/scrape=true",
                "podAnnotations.prometheus\\.io/port=9000",
                "config.servicer.enabled=true",
                "nodeType=servicer",
            ],
            values=[chart_dir + "/pocket-servicer-overrides.yaml"]
            if os.path.exists(chart_dir + "/pocket-servicer-overrides.yaml")
            else [],
        )
    )
    k8s_resource("servicer-%s-pocket" % formatted_number, labels=["pocket-servicers"])

# Provisions fishermen nodes
actor_number = 0
for x in range(localnet_config["fishermen"]["count"]):
    actor_number = actor_number + 1
    formatted_number = formatted_actor_number(actor_number)

    k8s_yaml(
        helm(
            chart_dir,
            name="fisherman-%s-pocket" % formatted_number,
            set=[
                "global.postgresql.auth.postgresPassword=LocalNetPassword",
                "image.repository=pocket-image",
                "privateKeySecretKeyRef.name=fishermen-private-keys",
                "privateKeySecretKeyRef.key=%s" % formatted_number,
                "genesis.preProvisionedGenesis.enabled=false",
                "genesis.externalConfigMap.name=v1-localnet-genesis",
                "genesis.externalConfigMap.key=genesis.json",
                "postgresql.primary.persistence.enabled=false",
                "podAnnotations.prometheus\\.io/scrape=true",
                "podAnnotations.prometheus\\.io/port=9000",
                "config.fisherman.enabled=true",
                "nodeType=fisherman",
            ],
            values=[chart_dir + "/pocket-fisherman-overrides.yaml"]
            if os.path.exists(chart_dir + "/pocket-fisherman-overrides.yaml")
            else [],
        )
    )

    k8s_resource("fisherman-%s-pocket" % formatted_number, labels=["pocket-fishermen"])

# Provisions full nodes
actor_number = 0
for x in range(localnet_config["full_nodes"]["count"]):
    actor_number = actor_number + 1
    formatted_number = formatted_actor_number(actor_number)
    k8s_yaml(
        helm(
            root_dir + "/charts/pocket",
            name="full-node-%s-pocket" % formatted_number,
            set=[
                "global.postgresql.auth.postgresPassword=LocalNetPassword",
                "image.repository=pocket-image",
                "privateKeySecretKeyRef.name=misc-private-keys",
                "privateKeySecretKeyRef.key=%s" % formatted_number,
                "genesis.preProvisionedGenesis.enabled=false",
                "genesis.externalConfigMap.name=v1-localnet-genesis",
                "genesis.externalConfigMap.key=genesis.json",
                "postgresql.primary.persistence.enabled=false",
                "podAnnotations.prometheus\\.io/scrape=true",
                "podAnnotations.prometheus\\.io/port=9000",
                "nodeType=full",
            ],
            values=[chart_dir + "/pocket-full-node-overrides.yaml"]
            if os.path.exists(chart_dir + "/pocket-full-node-overrides.yaml")
            else [],
        )
    )

    k8s_resource("full-node-%s-pocket" % formatted_number, labels=["pocket-full-nodes"])

# Exposes grafana
k8s_resource(
    new_name="grafana",
    workload="dependencies-grafana",
    extra_pod_selectors=[{"app.kubernetes.io/name": "grafana"}],
    port_forwards=["42000:3000"],
    labels=["monitoring"],
)

# E2E test button
test_go(
    "e2e-tests",
    "{root_dir}/e2e/tests".format(root_dir=root_dir),
    ".",
    extra_args=["-v", "-count=1", "-tags=e2e"],
    labels=["e2e-tests"],
    trigger_mode=TRIGGER_MODE_MANUAL,
)
