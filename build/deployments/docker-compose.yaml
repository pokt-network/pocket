version: "3.8"

name: pocket-v1

# Make sure you have the loki driver installed. If not, just run `make docker_loki_install`
x-loki: &loki-logging
  driver: loki
  options:
    loki-url: "http://localhost:3100/loki/api/v1/push"
    max-size: "5m"
    max-file: "3"
    keep-file: "false"
    loki-external-labels: "job=pocket-nodes,container_name={{.Name}},instance={{.Name}},project=pocket-v1"

services:
  client:
    container_name: client
    image: pocket/client:latest
    build:
      context: ../..
      dockerfile: ./build/Dockerfile.client
    volumes:
      - ${PWD}:/go/src/github.com/pocket-network
    stdin_open: true
    tty: true

  node1.consensus:
    logging: *loki-logging
    container_name: node1.consensus
    image: pocket/consensus:latest
    command: "build/scripts/watch.sh build/config/config1.json build/config/genesis.json"
    build:
      context: ../..
      dockerfile: ./build/Dockerfile.localdev
    expose:
      - "7080" # dlv debug
      - "8080"
      - "9080"
      - "9000"
      - "50832"
    ports:
      - "7081:7081"
      - "8081:8080"
      - "9081:9080"
      - "50832:50832"
    volumes:
      - ${PWD}:/go/src/github.com/pocket-network
    # Needed for DLV debugging
    security_opt:
      - "seccomp:unconfined"
    environment:
      - POCKET_RPC_USE_CORS=true
    # Uncomment to enable the pprof server
    #  - PPROF_ENABLED=true
    # Uncomment to enable DLV debugging
    #   - DEBUG_PORT=7081

  node2.consensus:
    logging: *loki-logging
    container_name: node2.consensus
    image: pocket/consensus:latest
    command: "build/scripts/watch.sh build/config/config2.json build/config/genesis.json"
    build:
      context: ../..
      dockerfile: ./build/Dockerfile.localdev
    expose:
      - "7082" # dlv debug
      - "8080"
      - "9080"
      - "9000"
      - "50832"
    ports:
      - "7082:7082"
      - "8082:8080"
      - "9082:9080"
      - "50833:50832"
    volumes:
      - ${PWD}:/go/src/github.com/pocket-network
    # Needed for DLV debugging
    security_opt:
      - "seccomp:unconfined"
    # Uncomment to enable DLV debugging
    # environment:
    #   - DEBUG_PORT=7082

  node3.consensus:
    logging: *loki-logging
    container_name: node3.consensus
    image: pocket/consensus:latest
    command: "build/scripts/watch.sh build/config/config3.json build/config/genesis.json"
    build:
      context: ../..
      dockerfile: ./build/Dockerfile.localdev
    expose:
      - "7083" # dlv debug
      - "8080"
      - "9080"
      - "9000"
      - "50832"
    ports:
      - "7083:7083"
      - "8083:8080"
      - "9083:9080"
      - "50834:50832"
    volumes:
      - ${PWD}:/go/src/github.com/pocket-network
    # Needed for DLV debugging
    security_opt:
      - "seccomp:unconfined"
    # Uncomment to enable DLV debugging
    # environment:
    #   - DEBUG_PORT=7083

  node4.consensus:
    logging: *loki-logging
    container_name: node4.consensus
    image: pocket/consensus:latest
    command: "build/scripts/watch.sh build/config/config4.json build/config/genesis.json"
    build:
      context: ../..
      dockerfile: ./build/Dockerfile.localdev
    expose:
      - "7084" # dlv debug
      - "8080"
      - "9080"
      - "9000"
      - "50832"
    ports:
      - "7084:7084"
      - "8084:8080"
      - "9084:9080"
      - "50835:50832"
    volumes:
      - ${PWD}:/go/src/github.com/pocket-network
    # Needed for DLV debugging
    security_opt:
      - "seccomp:unconfined"
  # Uncomment to enable DLV debugging
  # environment:
  #   - DEBUG_PORT=7084

  db:
    logging: *loki-logging
    container_name: pocket-db
    # image: postgis/postgis  # TODO(olshansky): switch image when we start adding support for GeoZones
    image: postgres:14.1-alpine
    restart: always
    depends_on:
      - loki
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - ${PWD}/build/sql:/tmp/scripts
      - db:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: pgadmin4
      PGADMIN_LISTEN_ADDRESS: 0.0.0.0
      PGADMIN_LISTEN_PORT: 5050
    volumes:
      - ${PWD}/build/pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ${PWD}/build/pgadmin/pgpass:/pgpass
    ports:
      - "5050:5050"

  vm:
    logging: *loki-logging
    container_name: victoria-metrics
    image: victoriametrics/victoria-metrics
    restart: unless-stopped
    ports:
      - "8428:8428"
    volumes:
      - vm:/storage
      - ./telemetry/victoria-metrics:/configs
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "--storageDataPath=/storage"
      - "--httpListenAddr=:8428"
      - "--promscrape.config=/configs/scrape.yml"

  grafana:
    logging: *loki-logging
    container_name: grafana
    image: grafana/grafana:8.5.5
    depends_on:
      - "vm"
    environment:
      # TODO(kdas): Figure out why including these plugins on some platforms causes this error:
      #             `Error: âœ— Plugin not found (Grafana v8.5.2 linux-arm64)`
      # - GF_INSTALL_PLUGINS="grafana-clock-panel,grafana-simple-json-datasource"
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafanadata:/var/lib/grafana
      - ./telemetry/grafana/provisioning/:/etc/grafana/provisioning/
      - ./telemetry/dashboards/:/var/lib/grafana/dashboards/
    restart: unless-stopped

  loki:
    # logging: *loki-logging
    image: grafana/loki:2.5.0
    container_name: loki
    expose:
      - 3100
    ports:
      - "3100:3100"
    restart: unless-stopped
    volumes:
      - ./telemetry/loki/config.yaml:/etc/loki/local-config.yaml
      - loki:/loki

volumes:
  db:
    driver: local
  vm:
    driver: local
  grafanadata:
    driver: local
  loki:
    driver: local
