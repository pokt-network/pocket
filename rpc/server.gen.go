// Package rpc provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rpc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// RawTXRequest defines model for RawTXRequest.
type RawTXRequest struct {
	Address     string `json:"address"`
	RawHexBytes string `json:"raw_hex_bytes"`
}

// RoundState defines model for RoundState.
type RoundState struct {
	Height int `json:"height"`
	Round  int `json:"round"`
	Step   int `json:"step"`
}

// PostV1ClientBroadcastTxSyncJSONBody defines parameters for PostV1ClientBroadcastTxSync.
type PostV1ClientBroadcastTxSyncJSONBody = RawTXRequest

// PostV1ClientBroadcastTxSyncJSONRequestBody defines body for PostV1ClientBroadcastTxSync for application/json ContentType.
type PostV1ClientBroadcastTxSyncJSONRequestBody = PostV1ClientBroadcastTxSyncJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Relays a raw transaction
	// (POST /v1/client/broadcast_tx_sync)
	PostV1ClientBroadcastTxSync(ctx echo.Context) error
	// Gets the current height, round and step
	// (GET /v1/consensus/round_state)
	GetV1ConsensusRoundState(ctx echo.Context) error
	// Get the liveness of the Pocket API node
	// (GET /v1/health)
	GetV1Health(ctx echo.Context) error
	// Get the current version of the Pocket Network API
	// (GET /v1/version)
	GetV1Version(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostV1ClientBroadcastTxSync converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ClientBroadcastTxSync(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ClientBroadcastTxSync(ctx)
	return err
}

// GetV1ConsensusRoundState converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ConsensusRoundState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ConsensusRoundState(ctx)
	return err
}

// GetV1Health converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Health(ctx)
	return err
}

// GetV1Version converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Version(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/client/broadcast_tx_sync", wrapper.PostV1ClientBroadcastTxSync)
	router.GET(baseURL+"/v1/consensus/round_state", wrapper.GetV1ConsensusRoundState)
	router.GET(baseURL+"/v1/health", wrapper.GetV1Health)
	router.GET(baseURL+"/v1/version", wrapper.GetV1Version)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWbW/bNhD+KwS3j67lNM02+NPyti5Y1gaJGwxYg+BMni02FKmSp9hC4P8+HCXZ8ku7",
	"YNg32rzX5557qBepfFF6h46iHL/IqHIsIB1vYTH56xa/VhiJf5fBlxjIYLoFrQPGdKS6RDmWkYJxc7ka",
	"yACLxxyXj9Oa8JAFm+DXygTUcvz3OtSu48Ogc/TTL6iIQ9/6yuk7AsL9knI085x6+YwjnGNIJbHf4atI",
	"WB662amyjd6Fav32a2Q/XBIGB/bCq1SZxqiCKcl4J8fyN+O08BWJwgcUMOXjjVdPSOID0sKHJzmQVbBy",
	"LHOiMo6zrPRPNHTt5WogjZt5Dqy8I1CpZyzAJBdv4ddd++0CJrmJwkRBOYrTmyuhcWac4cudOoTiCm9v",
	"zoUCa4ef3WfXGpgoQGjDE51WhFq0yQTlQCKghToKDQQiNAyKApwWAWPpXcQoyKc/ZsEXAlwtptarJ5WD",
	"cSLWkbDoZ3vGYGYGowBrm+Com+gcg1ngA5cP1tYi4AKCbrorIZBRpgQybi6c1xjFwlAubj7+MRnKgbRG",
	"oYuJTA4KnuOfVxNx3f67O4a5obyaDpUv0kTetE1nZSozm1o/zQowLru+Or/8cHfJ0BOGIn6c3WF4Ngq/",
	"MdMsWWVyIMmQZas9QjxjiM34joaj4YhD+xIdlEaO5fFwNDyWA1kC5Ylx2fNRpqxBR9k0eNAKIj3S8jHW",
	"TqXN8c1S8/4AQ3elU9JI90fnye+sc5ss79ip2QaMdOZ13XEPXYoCZWmNSnGyL5GL7JSETz8GnMmx/CHb",
	"SE3W6ky2JTJpd7apegsLQQFcBJX4SV5MsaOA7G8ohQrTyrYM48xvR6P99Zv0woHWqDkok6XAovTeJoLw",
	"TmIIPkQG+l0Tp9cx4ZKy0oJJveISijKNrZdK+JmYgbFVQLnf2BnobjU4w8n/n+HUNR0Ir1QVAmqxyI1F",
	"7pmXgTveQbYHQooXq6KAUPMYmoUGEbbnwYSFeWR9bNgmH9gxsY+n4GIVsySYj7ET7TkeYN57ZOJ1Lj2V",
	"35moxhlUll7BvzVim4fh55PR0U/rt2DUSf8xt/o6tm7qOsDVi6a2tcjtYPgeqRGlNA1HoilrIFI9SclS",
	"PT1IOzw2qOYIlvLvw/h7Y/OaXWhM64bj7/bvP7kmYS3eiE8uIKgcphZ7jP22PSseBnHJHNyHIiFhzTM6",
	"jJGJzL9b0eM3ibW6B0Xb9xqHtRp+D4j71uhVHNretw0fNpvX6O5g72vmPxBhiwdtLzsgdE/w6c1VD4eu",
	"74eUNiaI+eKl91KNs8x6BTb3kcYno1+O38rVwzrE7sjuD2ZvsrZPYpd0Ndh1vv7XAbYh2vntR7gwsQRS",
	"eft5YKEWsXkq48a71ZZ977ViJFf+DimQcq/7vuslWj2s/gkAAP//GiAIyO8KAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
