// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: persistence_genesis.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TODO(#258): Follow protobuf best practices
type PoolNames int32

const (
	PoolNames_PoolNameUnspecified  PoolNames = 0
	PoolNames_DAO                  PoolNames = 1
	PoolNames_FeeCollector         PoolNames = 2
	PoolNames_AppStakePool         PoolNames = 3
	PoolNames_ValidatorStakePool   PoolNames = 4
	PoolNames_ServiceNodeStakePool PoolNames = 5
	PoolNames_FishermanStakePool   PoolNames = 7
)

// Enum value maps for PoolNames.
var (
	PoolNames_name = map[int32]string{
		0: "PoolNameUnspecified",
		1: "DAO",
		2: "FeeCollector",
		3: "AppStakePool",
		4: "ValidatorStakePool",
		5: "ServiceNodeStakePool",
		7: "FishermanStakePool",
	}
	PoolNames_value = map[string]int32{
		"PoolNameUnspecified":  0,
		"DAO":                  1,
		"FeeCollector":         2,
		"AppStakePool":         3,
		"ValidatorStakePool":   4,
		"ServiceNodeStakePool": 5,
		"FishermanStakePool":   7,
	}
)

func (x PoolNames) Enum() *PoolNames {
	p := new(PoolNames)
	*p = x
	return p
}

func (x PoolNames) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolNames) Descriptor() protoreflect.EnumDescriptor {
	return file_persistence_genesis_proto_enumTypes[0].Descriptor()
}

func (PoolNames) Type() protoreflect.EnumType {
	return &file_persistence_genesis_proto_enumTypes[0]
}

func (x PoolNames) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolNames.Descriptor instead.
func (PoolNames) EnumDescriptor() ([]byte, []int) {
	return file_persistence_genesis_proto_rawDescGZIP(), []int{0}
}

type ActorType int32

const (
	ActorType_Undefined ActorType = 0
	ActorType_App       ActorType = 1
	ActorType_Node      ActorType = 2
	ActorType_Fish      ActorType = 3
	ActorType_Val       ActorType = 4
)

// Enum value maps for ActorType.
var (
	ActorType_name = map[int32]string{
		0: "Undefined",
		1: "App",
		2: "Node",
		3: "Fish",
		4: "Val",
	}
	ActorType_value = map[string]int32{
		"Undefined": 0,
		"App":       1,
		"Node":      2,
		"Fish":      3,
		"Val":       4,
	}
)

func (x ActorType) Enum() *ActorType {
	p := new(ActorType)
	*p = x
	return p
}

func (x ActorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorType) Descriptor() protoreflect.EnumDescriptor {
	return file_persistence_genesis_proto_enumTypes[1].Descriptor()
}

func (ActorType) Type() protoreflect.EnumType {
	return &file_persistence_genesis_proto_enumTypes[1]
}

func (x ActorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorType.Descriptor instead.
func (ActorType) EnumDescriptor() ([]byte, []int) {
	return file_persistence_genesis_proto_rawDescGZIP(), []int{1}
}

type PersistenceGenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools        []*Account `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	Accounts     []*Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Applications []*Actor   `protobuf:"bytes,3,rep,name=applications,proto3" json:"applications,omitempty"`
	Validators   []*Actor   `protobuf:"bytes,4,rep,name=validators,proto3" json:"validators,omitempty"`
	ServiceNodes []*Actor   `protobuf:"bytes,5,rep,name=service_nodes,json=serviceNodes,proto3" json:"service_nodes,omitempty"`
	Fishermen    []*Actor   `protobuf:"bytes,6,rep,name=fishermen,proto3" json:"fishermen,omitempty"`
	Params       *Params    `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *PersistenceGenesisState) Reset() {
	*x = PersistenceGenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistence_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistenceGenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistenceGenesisState) ProtoMessage() {}

func (x *PersistenceGenesisState) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistenceGenesisState.ProtoReflect.Descriptor instead.
func (*PersistenceGenesisState) Descriptor() ([]byte, []int) {
	return file_persistence_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *PersistenceGenesisState) GetPools() []*Account {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *PersistenceGenesisState) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *PersistenceGenesisState) GetApplications() []*Actor {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *PersistenceGenesisState) GetValidators() []*Actor {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *PersistenceGenesisState) GetServiceNodes() []*Actor {
	if x != nil {
		return x.ServiceNodes
	}
	return nil
}

func (x *PersistenceGenesisState) GetFishermen() []*Actor {
	if x != nil {
		return x.Fishermen
	}
	return nil
}

func (x *PersistenceGenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistence_genesis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_genesis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_persistence_genesis_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Account) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType       ActorType `protobuf:"varint,1,opt,name=actor_type,json=actorType,proto3,enum=persistence.ActorType" json:"actor_type,omitempty"`
	Address         string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey       string    `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Chains          []string  `protobuf:"bytes,4,rep,name=chains,proto3" json:"chains,omitempty"`
	GenericParam    string    `protobuf:"bytes,5,opt,name=generic_param,json=genericParam,proto3" json:"generic_param,omitempty"`
	StakedAmount    string    `protobuf:"bytes,6,opt,name=staked_amount,json=stakedAmount,proto3" json:"staked_amount,omitempty"`
	PausedHeight    int64     `protobuf:"varint,7,opt,name=paused_height,json=pausedHeight,proto3" json:"paused_height,omitempty"`
	UnstakingHeight int64     `protobuf:"varint,8,opt,name=unstaking_height,json=unstakingHeight,proto3" json:"unstaking_height,omitempty"`
	Output          string    `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistence_genesis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_genesis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_persistence_genesis_proto_rawDescGZIP(), []int{2}
}

func (x *Actor) GetActorType() ActorType {
	if x != nil {
		return x.ActorType
	}
	return ActorType_Undefined
}

func (x *Actor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Actor) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Actor) GetChains() []string {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *Actor) GetGenericParam() string {
	if x != nil {
		return x.GenericParam
	}
	return ""
}

func (x *Actor) GetStakedAmount() string {
	if x != nil {
		return x.StakedAmount
	}
	return ""
}

func (x *Actor) GetPausedHeight() int64 {
	if x != nil {
		return x.PausedHeight
	}
	return 0
}

func (x *Actor) GetUnstakingHeight() int64 {
	if x != nil {
		return x.UnstakingHeight
	}
	return 0
}

func (x *Actor) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// DISCUSS(drewskey): Explore a more general purpose "feature flag" like approach for this.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@gotags: pokt:"val_type=BIGINT"
	BlocksPerSession int32 `protobuf:"varint,1,opt,name=blocks_per_session,json=blocksPerSession,proto3" json:"blocks_per_session,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=STRING"
	AppMinimumStake string `protobuf:"bytes,2,opt,name=app_minimum_stake,json=appMinimumStake,proto3" json:"app_minimum_stake,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=SMALLINT"
	AppMaxChains int32 `protobuf:"varint,3,opt,name=app_max_chains,json=appMaxChains,proto3" json:"app_max_chains,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=BIGINT"
	AppBaselineStakeRate int32 `protobuf:"varint,4,opt,name=app_baseline_stake_rate,json=appBaselineStakeRate,proto3" json:"app_baseline_stake_rate,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=BIGINT"
	AppStakingAdjustment int32 `protobuf:"varint,5,opt,name=app_staking_adjustment,json=appStakingAdjustment,proto3" json:"app_staking_adjustment,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=BIGINT"
	AppUnstakingBlocks int32 `protobuf:"varint,6,opt,name=app_unstaking_blocks,json=appUnstakingBlocks,proto3" json:"app_unstaking_blocks,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	AppMinimumPauseBlocks int32 `protobuf:"varint,7,opt,name=app_minimum_pause_blocks,json=appMinimumPauseBlocks,proto3" json:"app_minimum_pause_blocks,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=BIGINT"
	AppMaxPauseBlocks int32 `protobuf:"varint,8,opt,name=app_max_pause_blocks,json=appMaxPauseBlocks,proto3" json:"app_max_pause_blocks,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=STRING"
	ServiceNodeMinimumStake string `protobuf:"bytes,9,opt,name=service_node_minimum_stake,json=serviceNodeMinimumStake,proto3" json:"service_node_minimum_stake,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=SMALLINT"
	ServiceNodeMaxChains int32 `protobuf:"varint,10,opt,name=service_node_max_chains,json=serviceNodeMaxChains,proto3" json:"service_node_max_chains,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=BIGINT"
	ServiceNodeUnstakingBlocks int32 `protobuf:"varint,11,opt,name=service_node_unstaking_blocks,json=serviceNodeUnstakingBlocks,proto3" json:"service_node_unstaking_blocks,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	ServiceNodeMinimumPauseBlocks int32 `protobuf:"varint,12,opt,name=service_node_minimum_pause_blocks,json=serviceNodeMinimumPauseBlocks,proto3" json:"service_node_minimum_pause_blocks,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=BIGINT"
	ServiceNodeMaxPauseBlocks int32 `protobuf:"varint,13,opt,name=service_node_max_pause_blocks,json=serviceNodeMaxPauseBlocks,proto3" json:"service_node_max_pause_blocks,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	ServiceNodesPerSession int32 `protobuf:"varint,14,opt,name=service_nodes_per_session,json=serviceNodesPerSession,proto3" json:"service_nodes_per_session,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=STRING"
	FishermanMinimumStake string `protobuf:"bytes,15,opt,name=fisherman_minimum_stake,json=fishermanMinimumStake,proto3" json:"fisherman_minimum_stake,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=SMALLINT"
	FishermanMaxChains int32 `protobuf:"varint,16,opt,name=fisherman_max_chains,json=fishermanMaxChains,proto3" json:"fisherman_max_chains,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=BIGINT"
	FishermanUnstakingBlocks int32 `protobuf:"varint,17,opt,name=fisherman_unstaking_blocks,json=fishermanUnstakingBlocks,proto3" json:"fisherman_unstaking_blocks,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	FishermanMinimumPauseBlocks int32 `protobuf:"varint,18,opt,name=fisherman_minimum_pause_blocks,json=fishermanMinimumPauseBlocks,proto3" json:"fisherman_minimum_pause_blocks,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	FishermanMaxPauseBlocks int32 `protobuf:"varint,19,opt,name=fisherman_max_pause_blocks,json=fishermanMaxPauseBlocks,proto3" json:"fisherman_max_pause_blocks,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=STRING"
	ValidatorMinimumStake string `protobuf:"bytes,20,opt,name=validator_minimum_stake,json=validatorMinimumStake,proto3" json:"validator_minimum_stake,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=BIGINT"
	ValidatorUnstakingBlocks int32 `protobuf:"varint,21,opt,name=validator_unstaking_blocks,json=validatorUnstakingBlocks,proto3" json:"validator_unstaking_blocks,omitempty" pokt:"val_type=BIGINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	ValidatorMinimumPauseBlocks int32 `protobuf:"varint,22,opt,name=validator_minimum_pause_blocks,json=validatorMinimumPauseBlocks,proto3" json:"validator_minimum_pause_blocks,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	ValidatorMaxPauseBlocks int32 `protobuf:"varint,23,opt,name=validator_max_pause_blocks,json=validatorMaxPauseBlocks,proto3" json:"validator_max_pause_blocks,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	ValidatorMaximumMissedBlocks int32 `protobuf:"varint,24,opt,name=validator_maximum_missed_blocks,json=validatorMaximumMissedBlocks,proto3" json:"validator_maximum_missed_blocks,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	ValidatorMaxEvidenceAgeInBlocks int32 `protobuf:"varint,25,opt,name=validator_max_evidence_age_in_blocks,json=validatorMaxEvidenceAgeInBlocks,proto3" json:"validator_max_evidence_age_in_blocks,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	ProposerPercentageOfFees int32 `protobuf:"varint,26,opt,name=proposer_percentage_of_fees,json=proposerPercentageOfFees,proto3" json:"proposer_percentage_of_fees,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	MissedBlocksBurnPercentage int32 `protobuf:"varint,27,opt,name=missed_blocks_burn_percentage,json=missedBlocksBurnPercentage,proto3" json:"missed_blocks_burn_percentage,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=SMALLINT"
	DoubleSignBurnPercentage int32 `protobuf:"varint,28,opt,name=double_sign_burn_percentage,json=doubleSignBurnPercentage,proto3" json:"double_sign_burn_percentage,omitempty" pokt:"val_type=SMALLINT"`
	//@gotags: pokt:"val_type=STRING"
	MessageDoubleSignFee string `protobuf:"bytes,29,opt,name=message_double_sign_fee,json=messageDoubleSignFee,proto3" json:"message_double_sign_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageSendFee string `protobuf:"bytes,30,opt,name=message_send_fee,json=messageSendFee,proto3" json:"message_send_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageStakeFishermanFee string `protobuf:"bytes,31,opt,name=message_stake_fisherman_fee,json=messageStakeFishermanFee,proto3" json:"message_stake_fisherman_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageEditStakeFishermanFee string `protobuf:"bytes,32,opt,name=message_edit_stake_fisherman_fee,json=messageEditStakeFishermanFee,proto3" json:"message_edit_stake_fisherman_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnstakeFishermanFee string `protobuf:"bytes,33,opt,name=message_unstake_fisherman_fee,json=messageUnstakeFishermanFee,proto3" json:"message_unstake_fisherman_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessagePauseFishermanFee string `protobuf:"bytes,34,opt,name=message_pause_fisherman_fee,json=messagePauseFishermanFee,proto3" json:"message_pause_fisherman_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnpauseFishermanFee string `protobuf:"bytes,35,opt,name=message_unpause_fisherman_fee,json=messageUnpauseFishermanFee,proto3" json:"message_unpause_fisherman_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageFishermanPauseServiceNodeFee string `protobuf:"bytes,36,opt,name=message_fisherman_pause_service_node_fee,json=messageFishermanPauseServiceNodeFee,proto3" json:"message_fisherman_pause_service_node_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageTestScoreFee string `protobuf:"bytes,37,opt,name=message_test_score_fee,json=messageTestScoreFee,proto3" json:"message_test_score_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageProveTestScoreFee string `protobuf:"bytes,38,opt,name=message_prove_test_score_fee,json=messageProveTestScoreFee,proto3" json:"message_prove_test_score_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageStakeAppFee string `protobuf:"bytes,39,opt,name=message_stake_app_fee,json=messageStakeAppFee,proto3" json:"message_stake_app_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageEditStakeAppFee string `protobuf:"bytes,40,opt,name=message_edit_stake_app_fee,json=messageEditStakeAppFee,proto3" json:"message_edit_stake_app_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnstakeAppFee string `protobuf:"bytes,41,opt,name=message_unstake_app_fee,json=messageUnstakeAppFee,proto3" json:"message_unstake_app_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessagePauseAppFee string `protobuf:"bytes,42,opt,name=message_pause_app_fee,json=messagePauseAppFee,proto3" json:"message_pause_app_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnpauseAppFee string `protobuf:"bytes,43,opt,name=message_unpause_app_fee,json=messageUnpauseAppFee,proto3" json:"message_unpause_app_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageStakeValidatorFee string `protobuf:"bytes,44,opt,name=message_stake_validator_fee,json=messageStakeValidatorFee,proto3" json:"message_stake_validator_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageEditStakeValidatorFee string `protobuf:"bytes,45,opt,name=message_edit_stake_validator_fee,json=messageEditStakeValidatorFee,proto3" json:"message_edit_stake_validator_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnstakeValidatorFee string `protobuf:"bytes,46,opt,name=message_unstake_validator_fee,json=messageUnstakeValidatorFee,proto3" json:"message_unstake_validator_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessagePauseValidatorFee string `protobuf:"bytes,47,opt,name=message_pause_validator_fee,json=messagePauseValidatorFee,proto3" json:"message_pause_validator_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnpauseValidatorFee string `protobuf:"bytes,48,opt,name=message_unpause_validator_fee,json=messageUnpauseValidatorFee,proto3" json:"message_unpause_validator_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageStakeServiceNodeFee string `protobuf:"bytes,49,opt,name=message_stake_service_node_fee,json=messageStakeServiceNodeFee,proto3" json:"message_stake_service_node_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageEditStakeServiceNodeFee string `protobuf:"bytes,50,opt,name=message_edit_stake_service_node_fee,json=messageEditStakeServiceNodeFee,proto3" json:"message_edit_stake_service_node_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnstakeServiceNodeFee string `protobuf:"bytes,51,opt,name=message_unstake_service_node_fee,json=messageUnstakeServiceNodeFee,proto3" json:"message_unstake_service_node_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessagePauseServiceNodeFee string `protobuf:"bytes,52,opt,name=message_pause_service_node_fee,json=messagePauseServiceNodeFee,proto3" json:"message_pause_service_node_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnpauseServiceNodeFee string `protobuf:"bytes,53,opt,name=message_unpause_service_node_fee,json=messageUnpauseServiceNodeFee,proto3" json:"message_unpause_service_node_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageChangeParameterFee string `protobuf:"bytes,54,opt,name=message_change_parameter_fee,json=messageChangeParameterFee,proto3" json:"message_change_parameter_fee,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	AclOwner string `protobuf:"bytes,55,opt,name=acl_owner,json=aclOwner,proto3" json:"acl_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	BlocksPerSessionOwner string `protobuf:"bytes,56,opt,name=blocks_per_session_owner,json=blocksPerSessionOwner,proto3" json:"blocks_per_session_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	AppMinimumStakeOwner string `protobuf:"bytes,57,opt,name=app_minimum_stake_owner,json=appMinimumStakeOwner,proto3" json:"app_minimum_stake_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	AppMaxChainsOwner string `protobuf:"bytes,58,opt,name=app_max_chains_owner,json=appMaxChainsOwner,proto3" json:"app_max_chains_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	AppBaselineStakeRateOwner string `protobuf:"bytes,59,opt,name=app_baseline_stake_rate_owner,json=appBaselineStakeRateOwner,proto3" json:"app_baseline_stake_rate_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	AppStakingAdjustmentOwner string `protobuf:"bytes,60,opt,name=app_staking_adjustment_owner,json=appStakingAdjustmentOwner,proto3" json:"app_staking_adjustment_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	AppUnstakingBlocksOwner string `protobuf:"bytes,61,opt,name=app_unstaking_blocks_owner,json=appUnstakingBlocksOwner,proto3" json:"app_unstaking_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	AppMinimumPauseBlocksOwner string `protobuf:"bytes,62,opt,name=app_minimum_pause_blocks_owner,json=appMinimumPauseBlocksOwner,proto3" json:"app_minimum_pause_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	AppMaxPausedBlocksOwner string `protobuf:"bytes,63,opt,name=app_max_paused_blocks_owner,json=appMaxPausedBlocksOwner,proto3" json:"app_max_paused_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ServiceNodeMinimumStakeOwner string `protobuf:"bytes,64,opt,name=service_node_minimum_stake_owner,json=serviceNodeMinimumStakeOwner,proto3" json:"service_node_minimum_stake_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ServiceNodeMaxChainsOwner string `protobuf:"bytes,65,opt,name=service_node_max_chains_owner,json=serviceNodeMaxChainsOwner,proto3" json:"service_node_max_chains_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ServiceNodeUnstakingBlocksOwner string `protobuf:"bytes,66,opt,name=service_node_unstaking_blocks_owner,json=serviceNodeUnstakingBlocksOwner,proto3" json:"service_node_unstaking_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ServiceNodeMinimumPauseBlocksOwner string `protobuf:"bytes,67,opt,name=service_node_minimum_pause_blocks_owner,json=serviceNodeMinimumPauseBlocksOwner,proto3" json:"service_node_minimum_pause_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ServiceNodeMaxPausedBlocksOwner string `protobuf:"bytes,68,opt,name=service_node_max_paused_blocks_owner,json=serviceNodeMaxPausedBlocksOwner,proto3" json:"service_node_max_paused_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ServiceNodesPerSessionOwner string `protobuf:"bytes,69,opt,name=service_nodes_per_session_owner,json=serviceNodesPerSessionOwner,proto3" json:"service_nodes_per_session_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	FishermanMinimumStakeOwner string `protobuf:"bytes,70,opt,name=fisherman_minimum_stake_owner,json=fishermanMinimumStakeOwner,proto3" json:"fisherman_minimum_stake_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	FishermanMaxChainsOwner string `protobuf:"bytes,71,opt,name=fisherman_max_chains_owner,json=fishermanMaxChainsOwner,proto3" json:"fisherman_max_chains_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	FishermanUnstakingBlocksOwner string `protobuf:"bytes,72,opt,name=fisherman_unstaking_blocks_owner,json=fishermanUnstakingBlocksOwner,proto3" json:"fisherman_unstaking_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	FishermanMinimumPauseBlocksOwner string `protobuf:"bytes,73,opt,name=fisherman_minimum_pause_blocks_owner,json=fishermanMinimumPauseBlocksOwner,proto3" json:"fisherman_minimum_pause_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	FishermanMaxPausedBlocksOwner string `protobuf:"bytes,74,opt,name=fisherman_max_paused_blocks_owner,json=fishermanMaxPausedBlocksOwner,proto3" json:"fisherman_max_paused_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ValidatorMinimumStakeOwner string `protobuf:"bytes,75,opt,name=validator_minimum_stake_owner,json=validatorMinimumStakeOwner,proto3" json:"validator_minimum_stake_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ValidatorUnstakingBlocksOwner string `protobuf:"bytes,76,opt,name=validator_unstaking_blocks_owner,json=validatorUnstakingBlocksOwner,proto3" json:"validator_unstaking_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ValidatorMinimumPauseBlocksOwner string `protobuf:"bytes,77,opt,name=validator_minimum_pause_blocks_owner,json=validatorMinimumPauseBlocksOwner,proto3" json:"validator_minimum_pause_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ValidatorMaxPausedBlocksOwner string `protobuf:"bytes,78,opt,name=validator_max_paused_blocks_owner,json=validatorMaxPausedBlocksOwner,proto3" json:"validator_max_paused_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ValidatorMaximumMissedBlocksOwner string `protobuf:"bytes,79,opt,name=validator_maximum_missed_blocks_owner,json=validatorMaximumMissedBlocksOwner,proto3" json:"validator_maximum_missed_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ValidatorMaxEvidenceAgeInBlocksOwner string `protobuf:"bytes,80,opt,name=validator_max_evidence_age_in_blocks_owner,json=validatorMaxEvidenceAgeInBlocksOwner,proto3" json:"validator_max_evidence_age_in_blocks_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	ProposerPercentageOfFeesOwner string `protobuf:"bytes,81,opt,name=proposer_percentage_of_fees_owner,json=proposerPercentageOfFeesOwner,proto3" json:"proposer_percentage_of_fees_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MissedBlocksBurnPercentageOwner string `protobuf:"bytes,82,opt,name=missed_blocks_burn_percentage_owner,json=missedBlocksBurnPercentageOwner,proto3" json:"missed_blocks_burn_percentage_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	DoubleSignBurnPercentageOwner string `protobuf:"bytes,83,opt,name=double_sign_burn_percentage_owner,json=doubleSignBurnPercentageOwner,proto3" json:"double_sign_burn_percentage_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageDoubleSignFeeOwner string `protobuf:"bytes,84,opt,name=message_double_sign_fee_owner,json=messageDoubleSignFeeOwner,proto3" json:"message_double_sign_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageSendFeeOwner string `protobuf:"bytes,85,opt,name=message_send_fee_owner,json=messageSendFeeOwner,proto3" json:"message_send_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageStakeFishermanFeeOwner string `protobuf:"bytes,86,opt,name=message_stake_fisherman_fee_owner,json=messageStakeFishermanFeeOwner,proto3" json:"message_stake_fisherman_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageEditStakeFishermanFeeOwner string `protobuf:"bytes,87,opt,name=message_edit_stake_fisherman_fee_owner,json=messageEditStakeFishermanFeeOwner,proto3" json:"message_edit_stake_fisherman_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnstakeFishermanFeeOwner string `protobuf:"bytes,88,opt,name=message_unstake_fisherman_fee_owner,json=messageUnstakeFishermanFeeOwner,proto3" json:"message_unstake_fisherman_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessagePauseFishermanFeeOwner string `protobuf:"bytes,89,opt,name=message_pause_fisherman_fee_owner,json=messagePauseFishermanFeeOwner,proto3" json:"message_pause_fisherman_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnpauseFishermanFeeOwner string `protobuf:"bytes,90,opt,name=message_unpause_fisherman_fee_owner,json=messageUnpauseFishermanFeeOwner,proto3" json:"message_unpause_fisherman_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageFishermanPauseServiceNodeFeeOwner string `protobuf:"bytes,91,opt,name=message_fisherman_pause_service_node_fee_owner,json=messageFishermanPauseServiceNodeFeeOwner,proto3" json:"message_fisherman_pause_service_node_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageTestScoreFeeOwner string `protobuf:"bytes,92,opt,name=message_test_score_fee_owner,json=messageTestScoreFeeOwner,proto3" json:"message_test_score_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageProveTestScoreFeeOwner string `protobuf:"bytes,93,opt,name=message_prove_test_score_fee_owner,json=messageProveTestScoreFeeOwner,proto3" json:"message_prove_test_score_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageStakeAppFeeOwner string `protobuf:"bytes,94,opt,name=message_stake_app_fee_owner,json=messageStakeAppFeeOwner,proto3" json:"message_stake_app_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageEditStakeAppFeeOwner string `protobuf:"bytes,95,opt,name=message_edit_stake_app_fee_owner,json=messageEditStakeAppFeeOwner,proto3" json:"message_edit_stake_app_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnstakeAppFeeOwner string `protobuf:"bytes,96,opt,name=message_unstake_app_fee_owner,json=messageUnstakeAppFeeOwner,proto3" json:"message_unstake_app_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessagePauseAppFeeOwner string `protobuf:"bytes,97,opt,name=message_pause_app_fee_owner,json=messagePauseAppFeeOwner,proto3" json:"message_pause_app_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnpauseAppFeeOwner string `protobuf:"bytes,98,opt,name=message_unpause_app_fee_owner,json=messageUnpauseAppFeeOwner,proto3" json:"message_unpause_app_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageStakeValidatorFeeOwner string `protobuf:"bytes,99,opt,name=message_stake_validator_fee_owner,json=messageStakeValidatorFeeOwner,proto3" json:"message_stake_validator_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageEditStakeValidatorFeeOwner string `protobuf:"bytes,100,opt,name=message_edit_stake_validator_fee_owner,json=messageEditStakeValidatorFeeOwner,proto3" json:"message_edit_stake_validator_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnstakeValidatorFeeOwner string `protobuf:"bytes,101,opt,name=message_unstake_validator_fee_owner,json=messageUnstakeValidatorFeeOwner,proto3" json:"message_unstake_validator_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessagePauseValidatorFeeOwner string `protobuf:"bytes,102,opt,name=message_pause_validator_fee_owner,json=messagePauseValidatorFeeOwner,proto3" json:"message_pause_validator_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnpauseValidatorFeeOwner string `protobuf:"bytes,103,opt,name=message_unpause_validator_fee_owner,json=messageUnpauseValidatorFeeOwner,proto3" json:"message_unpause_validator_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageStakeServiceNodeFeeOwner string `protobuf:"bytes,104,opt,name=message_stake_service_node_fee_owner,json=messageStakeServiceNodeFeeOwner,proto3" json:"message_stake_service_node_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageEditStakeServiceNodeFeeOwner string `protobuf:"bytes,105,opt,name=message_edit_stake_service_node_fee_owner,json=messageEditStakeServiceNodeFeeOwner,proto3" json:"message_edit_stake_service_node_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnstakeServiceNodeFeeOwner string `protobuf:"bytes,106,opt,name=message_unstake_service_node_fee_owner,json=messageUnstakeServiceNodeFeeOwner,proto3" json:"message_unstake_service_node_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessagePauseServiceNodeFeeOwner string `protobuf:"bytes,107,opt,name=message_pause_service_node_fee_owner,json=messagePauseServiceNodeFeeOwner,proto3" json:"message_pause_service_node_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageUnpauseServiceNodeFeeOwner string `protobuf:"bytes,108,opt,name=message_unpause_service_node_fee_owner,json=messageUnpauseServiceNodeFeeOwner,proto3" json:"message_unpause_service_node_fee_owner,omitempty" pokt:"val_type=STRING"`
	//@gotags: pokt:"val_type=STRING"
	MessageChangeParameterFeeOwner string `protobuf:"bytes,109,opt,name=message_change_parameter_fee_owner,json=messageChangeParameterFeeOwner,proto3" json:"message_change_parameter_fee_owner,omitempty" pokt:"val_type=STRING"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistence_genesis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_genesis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_persistence_genesis_proto_rawDescGZIP(), []int{3}
}

func (x *Params) GetBlocksPerSession() int32 {
	if x != nil {
		return x.BlocksPerSession
	}
	return 0
}

func (x *Params) GetAppMinimumStake() string {
	if x != nil {
		return x.AppMinimumStake
	}
	return ""
}

func (x *Params) GetAppMaxChains() int32 {
	if x != nil {
		return x.AppMaxChains
	}
	return 0
}

func (x *Params) GetAppBaselineStakeRate() int32 {
	if x != nil {
		return x.AppBaselineStakeRate
	}
	return 0
}

func (x *Params) GetAppStakingAdjustment() int32 {
	if x != nil {
		return x.AppStakingAdjustment
	}
	return 0
}

func (x *Params) GetAppUnstakingBlocks() int32 {
	if x != nil {
		return x.AppUnstakingBlocks
	}
	return 0
}

func (x *Params) GetAppMinimumPauseBlocks() int32 {
	if x != nil {
		return x.AppMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetAppMaxPauseBlocks() int32 {
	if x != nil {
		return x.AppMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetServiceNodeMinimumStake() string {
	if x != nil {
		return x.ServiceNodeMinimumStake
	}
	return ""
}

func (x *Params) GetServiceNodeMaxChains() int32 {
	if x != nil {
		return x.ServiceNodeMaxChains
	}
	return 0
}

func (x *Params) GetServiceNodeUnstakingBlocks() int32 {
	if x != nil {
		return x.ServiceNodeUnstakingBlocks
	}
	return 0
}

func (x *Params) GetServiceNodeMinimumPauseBlocks() int32 {
	if x != nil {
		return x.ServiceNodeMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetServiceNodeMaxPauseBlocks() int32 {
	if x != nil {
		return x.ServiceNodeMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetServiceNodesPerSession() int32 {
	if x != nil {
		return x.ServiceNodesPerSession
	}
	return 0
}

func (x *Params) GetFishermanMinimumStake() string {
	if x != nil {
		return x.FishermanMinimumStake
	}
	return ""
}

func (x *Params) GetFishermanMaxChains() int32 {
	if x != nil {
		return x.FishermanMaxChains
	}
	return 0
}

func (x *Params) GetFishermanUnstakingBlocks() int32 {
	if x != nil {
		return x.FishermanUnstakingBlocks
	}
	return 0
}

func (x *Params) GetFishermanMinimumPauseBlocks() int32 {
	if x != nil {
		return x.FishermanMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetFishermanMaxPauseBlocks() int32 {
	if x != nil {
		return x.FishermanMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetValidatorMinimumStake() string {
	if x != nil {
		return x.ValidatorMinimumStake
	}
	return ""
}

func (x *Params) GetValidatorUnstakingBlocks() int32 {
	if x != nil {
		return x.ValidatorUnstakingBlocks
	}
	return 0
}

func (x *Params) GetValidatorMinimumPauseBlocks() int32 {
	if x != nil {
		return x.ValidatorMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaxPauseBlocks() int32 {
	if x != nil {
		return x.ValidatorMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaximumMissedBlocks() int32 {
	if x != nil {
		return x.ValidatorMaximumMissedBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaxEvidenceAgeInBlocks() int32 {
	if x != nil {
		return x.ValidatorMaxEvidenceAgeInBlocks
	}
	return 0
}

func (x *Params) GetProposerPercentageOfFees() int32 {
	if x != nil {
		return x.ProposerPercentageOfFees
	}
	return 0
}

func (x *Params) GetMissedBlocksBurnPercentage() int32 {
	if x != nil {
		return x.MissedBlocksBurnPercentage
	}
	return 0
}

func (x *Params) GetDoubleSignBurnPercentage() int32 {
	if x != nil {
		return x.DoubleSignBurnPercentage
	}
	return 0
}

func (x *Params) GetMessageDoubleSignFee() string {
	if x != nil {
		return x.MessageDoubleSignFee
	}
	return ""
}

func (x *Params) GetMessageSendFee() string {
	if x != nil {
		return x.MessageSendFee
	}
	return ""
}

func (x *Params) GetMessageStakeFishermanFee() string {
	if x != nil {
		return x.MessageStakeFishermanFee
	}
	return ""
}

func (x *Params) GetMessageEditStakeFishermanFee() string {
	if x != nil {
		return x.MessageEditStakeFishermanFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeFishermanFee() string {
	if x != nil {
		return x.MessageUnstakeFishermanFee
	}
	return ""
}

func (x *Params) GetMessagePauseFishermanFee() string {
	if x != nil {
		return x.MessagePauseFishermanFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseFishermanFee() string {
	if x != nil {
		return x.MessageUnpauseFishermanFee
	}
	return ""
}

func (x *Params) GetMessageFishermanPauseServiceNodeFee() string {
	if x != nil {
		return x.MessageFishermanPauseServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageTestScoreFee() string {
	if x != nil {
		return x.MessageTestScoreFee
	}
	return ""
}

func (x *Params) GetMessageProveTestScoreFee() string {
	if x != nil {
		return x.MessageProveTestScoreFee
	}
	return ""
}

func (x *Params) GetMessageStakeAppFee() string {
	if x != nil {
		return x.MessageStakeAppFee
	}
	return ""
}

func (x *Params) GetMessageEditStakeAppFee() string {
	if x != nil {
		return x.MessageEditStakeAppFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeAppFee() string {
	if x != nil {
		return x.MessageUnstakeAppFee
	}
	return ""
}

func (x *Params) GetMessagePauseAppFee() string {
	if x != nil {
		return x.MessagePauseAppFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseAppFee() string {
	if x != nil {
		return x.MessageUnpauseAppFee
	}
	return ""
}

func (x *Params) GetMessageStakeValidatorFee() string {
	if x != nil {
		return x.MessageStakeValidatorFee
	}
	return ""
}

func (x *Params) GetMessageEditStakeValidatorFee() string {
	if x != nil {
		return x.MessageEditStakeValidatorFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeValidatorFee() string {
	if x != nil {
		return x.MessageUnstakeValidatorFee
	}
	return ""
}

func (x *Params) GetMessagePauseValidatorFee() string {
	if x != nil {
		return x.MessagePauseValidatorFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseValidatorFee() string {
	if x != nil {
		return x.MessageUnpauseValidatorFee
	}
	return ""
}

func (x *Params) GetMessageStakeServiceNodeFee() string {
	if x != nil {
		return x.MessageStakeServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageEditStakeServiceNodeFee() string {
	if x != nil {
		return x.MessageEditStakeServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeServiceNodeFee() string {
	if x != nil {
		return x.MessageUnstakeServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessagePauseServiceNodeFee() string {
	if x != nil {
		return x.MessagePauseServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseServiceNodeFee() string {
	if x != nil {
		return x.MessageUnpauseServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageChangeParameterFee() string {
	if x != nil {
		return x.MessageChangeParameterFee
	}
	return ""
}

func (x *Params) GetAclOwner() string {
	if x != nil {
		return x.AclOwner
	}
	return ""
}

func (x *Params) GetBlocksPerSessionOwner() string {
	if x != nil {
		return x.BlocksPerSessionOwner
	}
	return ""
}

func (x *Params) GetAppMinimumStakeOwner() string {
	if x != nil {
		return x.AppMinimumStakeOwner
	}
	return ""
}

func (x *Params) GetAppMaxChainsOwner() string {
	if x != nil {
		return x.AppMaxChainsOwner
	}
	return ""
}

func (x *Params) GetAppBaselineStakeRateOwner() string {
	if x != nil {
		return x.AppBaselineStakeRateOwner
	}
	return ""
}

func (x *Params) GetAppStakingAdjustmentOwner() string {
	if x != nil {
		return x.AppStakingAdjustmentOwner
	}
	return ""
}

func (x *Params) GetAppUnstakingBlocksOwner() string {
	if x != nil {
		return x.AppUnstakingBlocksOwner
	}
	return ""
}

func (x *Params) GetAppMinimumPauseBlocksOwner() string {
	if x != nil {
		return x.AppMinimumPauseBlocksOwner
	}
	return ""
}

func (x *Params) GetAppMaxPausedBlocksOwner() string {
	if x != nil {
		return x.AppMaxPausedBlocksOwner
	}
	return ""
}

func (x *Params) GetServiceNodeMinimumStakeOwner() string {
	if x != nil {
		return x.ServiceNodeMinimumStakeOwner
	}
	return ""
}

func (x *Params) GetServiceNodeMaxChainsOwner() string {
	if x != nil {
		return x.ServiceNodeMaxChainsOwner
	}
	return ""
}

func (x *Params) GetServiceNodeUnstakingBlocksOwner() string {
	if x != nil {
		return x.ServiceNodeUnstakingBlocksOwner
	}
	return ""
}

func (x *Params) GetServiceNodeMinimumPauseBlocksOwner() string {
	if x != nil {
		return x.ServiceNodeMinimumPauseBlocksOwner
	}
	return ""
}

func (x *Params) GetServiceNodeMaxPausedBlocksOwner() string {
	if x != nil {
		return x.ServiceNodeMaxPausedBlocksOwner
	}
	return ""
}

func (x *Params) GetServiceNodesPerSessionOwner() string {
	if x != nil {
		return x.ServiceNodesPerSessionOwner
	}
	return ""
}

func (x *Params) GetFishermanMinimumStakeOwner() string {
	if x != nil {
		return x.FishermanMinimumStakeOwner
	}
	return ""
}

func (x *Params) GetFishermanMaxChainsOwner() string {
	if x != nil {
		return x.FishermanMaxChainsOwner
	}
	return ""
}

func (x *Params) GetFishermanUnstakingBlocksOwner() string {
	if x != nil {
		return x.FishermanUnstakingBlocksOwner
	}
	return ""
}

func (x *Params) GetFishermanMinimumPauseBlocksOwner() string {
	if x != nil {
		return x.FishermanMinimumPauseBlocksOwner
	}
	return ""
}

func (x *Params) GetFishermanMaxPausedBlocksOwner() string {
	if x != nil {
		return x.FishermanMaxPausedBlocksOwner
	}
	return ""
}

func (x *Params) GetValidatorMinimumStakeOwner() string {
	if x != nil {
		return x.ValidatorMinimumStakeOwner
	}
	return ""
}

func (x *Params) GetValidatorUnstakingBlocksOwner() string {
	if x != nil {
		return x.ValidatorUnstakingBlocksOwner
	}
	return ""
}

func (x *Params) GetValidatorMinimumPauseBlocksOwner() string {
	if x != nil {
		return x.ValidatorMinimumPauseBlocksOwner
	}
	return ""
}

func (x *Params) GetValidatorMaxPausedBlocksOwner() string {
	if x != nil {
		return x.ValidatorMaxPausedBlocksOwner
	}
	return ""
}

func (x *Params) GetValidatorMaximumMissedBlocksOwner() string {
	if x != nil {
		return x.ValidatorMaximumMissedBlocksOwner
	}
	return ""
}

func (x *Params) GetValidatorMaxEvidenceAgeInBlocksOwner() string {
	if x != nil {
		return x.ValidatorMaxEvidenceAgeInBlocksOwner
	}
	return ""
}

func (x *Params) GetProposerPercentageOfFeesOwner() string {
	if x != nil {
		return x.ProposerPercentageOfFeesOwner
	}
	return ""
}

func (x *Params) GetMissedBlocksBurnPercentageOwner() string {
	if x != nil {
		return x.MissedBlocksBurnPercentageOwner
	}
	return ""
}

func (x *Params) GetDoubleSignBurnPercentageOwner() string {
	if x != nil {
		return x.DoubleSignBurnPercentageOwner
	}
	return ""
}

func (x *Params) GetMessageDoubleSignFeeOwner() string {
	if x != nil {
		return x.MessageDoubleSignFeeOwner
	}
	return ""
}

func (x *Params) GetMessageSendFeeOwner() string {
	if x != nil {
		return x.MessageSendFeeOwner
	}
	return ""
}

func (x *Params) GetMessageStakeFishermanFeeOwner() string {
	if x != nil {
		return x.MessageStakeFishermanFeeOwner
	}
	return ""
}

func (x *Params) GetMessageEditStakeFishermanFeeOwner() string {
	if x != nil {
		return x.MessageEditStakeFishermanFeeOwner
	}
	return ""
}

func (x *Params) GetMessageUnstakeFishermanFeeOwner() string {
	if x != nil {
		return x.MessageUnstakeFishermanFeeOwner
	}
	return ""
}

func (x *Params) GetMessagePauseFishermanFeeOwner() string {
	if x != nil {
		return x.MessagePauseFishermanFeeOwner
	}
	return ""
}

func (x *Params) GetMessageUnpauseFishermanFeeOwner() string {
	if x != nil {
		return x.MessageUnpauseFishermanFeeOwner
	}
	return ""
}

func (x *Params) GetMessageFishermanPauseServiceNodeFeeOwner() string {
	if x != nil {
		return x.MessageFishermanPauseServiceNodeFeeOwner
	}
	return ""
}

func (x *Params) GetMessageTestScoreFeeOwner() string {
	if x != nil {
		return x.MessageTestScoreFeeOwner
	}
	return ""
}

func (x *Params) GetMessageProveTestScoreFeeOwner() string {
	if x != nil {
		return x.MessageProveTestScoreFeeOwner
	}
	return ""
}

func (x *Params) GetMessageStakeAppFeeOwner() string {
	if x != nil {
		return x.MessageStakeAppFeeOwner
	}
	return ""
}

func (x *Params) GetMessageEditStakeAppFeeOwner() string {
	if x != nil {
		return x.MessageEditStakeAppFeeOwner
	}
	return ""
}

func (x *Params) GetMessageUnstakeAppFeeOwner() string {
	if x != nil {
		return x.MessageUnstakeAppFeeOwner
	}
	return ""
}

func (x *Params) GetMessagePauseAppFeeOwner() string {
	if x != nil {
		return x.MessagePauseAppFeeOwner
	}
	return ""
}

func (x *Params) GetMessageUnpauseAppFeeOwner() string {
	if x != nil {
		return x.MessageUnpauseAppFeeOwner
	}
	return ""
}

func (x *Params) GetMessageStakeValidatorFeeOwner() string {
	if x != nil {
		return x.MessageStakeValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetMessageEditStakeValidatorFeeOwner() string {
	if x != nil {
		return x.MessageEditStakeValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetMessageUnstakeValidatorFeeOwner() string {
	if x != nil {
		return x.MessageUnstakeValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetMessagePauseValidatorFeeOwner() string {
	if x != nil {
		return x.MessagePauseValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetMessageUnpauseValidatorFeeOwner() string {
	if x != nil {
		return x.MessageUnpauseValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetMessageStakeServiceNodeFeeOwner() string {
	if x != nil {
		return x.MessageStakeServiceNodeFeeOwner
	}
	return ""
}

func (x *Params) GetMessageEditStakeServiceNodeFeeOwner() string {
	if x != nil {
		return x.MessageEditStakeServiceNodeFeeOwner
	}
	return ""
}

func (x *Params) GetMessageUnstakeServiceNodeFeeOwner() string {
	if x != nil {
		return x.MessageUnstakeServiceNodeFeeOwner
	}
	return ""
}

func (x *Params) GetMessagePauseServiceNodeFeeOwner() string {
	if x != nil {
		return x.MessagePauseServiceNodeFeeOwner
	}
	return ""
}

func (x *Params) GetMessageUnpauseServiceNodeFeeOwner() string {
	if x != nil {
		return x.MessageUnpauseServiceNodeFeeOwner
	}
	return ""
}

func (x *Params) GetMessageChangeParameterFeeOwner() string {
	if x != nil {
		return x.MessageChangeParameterFeeOwner
	}
	return ""
}

var File_persistence_genesis_proto protoreflect.FileDescriptor

var file_persistence_genesis_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x17, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x66, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3b, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xf5, 0x38, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x70, 0x70, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61,
	0x70, 0x70, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x70,
	0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x78,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x40, 0x0a, 0x1d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x39,
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x66, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x66, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3b,
	0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x46, 0x65, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x3d, 0x0a,
	0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x1d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12,
	0x55, 0x0a, 0x28, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x12, 0x3a,
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65,
	0x65, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x41, 0x70,
	0x70, 0x46, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x46, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x1c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x63, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x70,
	0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x78,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x61,
	0x70, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x61, 0x70, 0x70, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x1c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x1a, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1e, 0x61,
	0x70, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x27, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x24, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x1d, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x20, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x24, 0x66, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x21, 0x66, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x61,
	0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x21, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x25, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x2a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x4f, 0x66, 0x46, 0x65, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x23, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x62, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x21,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46,
	0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x26, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x59, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x46,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x60, 0x0a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x28, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x20, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x26, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x24, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x29, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x26, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x24, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x26, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x2a,
	0x9b, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x4f, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x10, 0x07, 0x2a, 0x40, 0x0a,
	0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x70, 0x70,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x69, 0x73, 0x68, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x61, 0x6c, 0x10, 0x04, 0x42,
	0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f,
	0x6b, 0x74, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_persistence_genesis_proto_rawDescOnce sync.Once
	file_persistence_genesis_proto_rawDescData = file_persistence_genesis_proto_rawDesc
)

func file_persistence_genesis_proto_rawDescGZIP() []byte {
	file_persistence_genesis_proto_rawDescOnce.Do(func() {
		file_persistence_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_persistence_genesis_proto_rawDescData)
	})
	return file_persistence_genesis_proto_rawDescData
}

var file_persistence_genesis_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_persistence_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_persistence_genesis_proto_goTypes = []interface{}{
	(PoolNames)(0),                  // 0: persistence.PoolNames
	(ActorType)(0),                  // 1: persistence.ActorType
	(*PersistenceGenesisState)(nil), // 2: persistence.PersistenceGenesisState
	(*Account)(nil),                 // 3: persistence.Account
	(*Actor)(nil),                   // 4: persistence.Actor
	(*Params)(nil),                  // 5: persistence.Params
}
var file_persistence_genesis_proto_depIdxs = []int32{
	3, // 0: persistence.PersistenceGenesisState.pools:type_name -> persistence.Account
	3, // 1: persistence.PersistenceGenesisState.accounts:type_name -> persistence.Account
	4, // 2: persistence.PersistenceGenesisState.applications:type_name -> persistence.Actor
	4, // 3: persistence.PersistenceGenesisState.validators:type_name -> persistence.Actor
	4, // 4: persistence.PersistenceGenesisState.service_nodes:type_name -> persistence.Actor
	4, // 5: persistence.PersistenceGenesisState.fishermen:type_name -> persistence.Actor
	5, // 6: persistence.PersistenceGenesisState.params:type_name -> persistence.Params
	1, // 7: persistence.Actor.actor_type:type_name -> persistence.ActorType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_persistence_genesis_proto_init() }
func file_persistence_genesis_proto_init() {
	if File_persistence_genesis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_persistence_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistenceGenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistence_genesis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistence_genesis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistence_genesis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_persistence_genesis_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_persistence_genesis_proto_goTypes,
		DependencyIndexes: file_persistence_genesis_proto_depIdxs,
		EnumInfos:         file_persistence_genesis_proto_enumTypes,
		MessageInfos:      file_persistence_genesis_proto_msgTypes,
	}.Build()
	File_persistence_genesis_proto = out.File
	file_persistence_genesis_proto_rawDesc = nil
	file_persistence_genesis_proto_goTypes = nil
	file_persistence_genesis_proto_depIdxs = nil
}
