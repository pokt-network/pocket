// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: gov.proto

package pre_persistence

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlocksPerSession                         int32  `protobuf:"varint,1,opt,name=BlocksPerSession,proto3" json:"BlocksPerSession,omitempty"`
	AppMinimumStake                          string `protobuf:"bytes,2,opt,name=AppMinimumStake,proto3" json:"AppMinimumStake,omitempty"`
	AppMaxChains                             int32  `protobuf:"varint,3,opt,name=AppMaxChains,proto3" json:"AppMaxChains,omitempty"`
	AppBaselineStakeRate                     int32  `protobuf:"varint,4,opt,name=AppBaselineStakeRate,proto3" json:"AppBaselineStakeRate,omitempty"`
	AppStakingAdjustment                     int32  `protobuf:"varint,5,opt,name=AppStakingAdjustment,proto3" json:"AppStakingAdjustment,omitempty"`
	AppUnstakingBlocks                       int32  `protobuf:"varint,6,opt,name=AppUnstakingBlocks,proto3" json:"AppUnstakingBlocks,omitempty"`
	AppMinimumPauseBlocks                    int32  `protobuf:"varint,7,opt,name=AppMinimumPauseBlocks,proto3" json:"AppMinimumPauseBlocks,omitempty"`
	AppMaxPauseBlocks                        int32  `protobuf:"varint,8,opt,name=AppMaxPauseBlocks,proto3" json:"AppMaxPauseBlocks,omitempty"`
	ServiceNodeMinimumStake                  string `protobuf:"bytes,9,opt,name=ServiceNodeMinimumStake,proto3" json:"ServiceNodeMinimumStake,omitempty"`
	ServiceNodeMaxChains                     int32  `protobuf:"varint,10,opt,name=ServiceNodeMaxChains,proto3" json:"ServiceNodeMaxChains,omitempty"`
	ServiceNodeUnstakingBlocks               int32  `protobuf:"varint,11,opt,name=ServiceNodeUnstakingBlocks,proto3" json:"ServiceNodeUnstakingBlocks,omitempty"`
	ServiceNodeMinimumPauseBlocks            int32  `protobuf:"varint,12,opt,name=ServiceNodeMinimumPauseBlocks,proto3" json:"ServiceNodeMinimumPauseBlocks,omitempty"`
	ServiceNodeMaxPauseBlocks                int32  `protobuf:"varint,13,opt,name=ServiceNodeMaxPauseBlocks,proto3" json:"ServiceNodeMaxPauseBlocks,omitempty"`
	ServiceNodesPerSession                   int32  `protobuf:"varint,14,opt,name=ServiceNodesPerSession,proto3" json:"ServiceNodesPerSession,omitempty"`
	FishermanMinimumStake                    string `protobuf:"bytes,15,opt,name=FishermanMinimumStake,proto3" json:"FishermanMinimumStake,omitempty"`
	FishermanMaxChains                       int32  `protobuf:"varint,16,opt,name=FishermanMaxChains,proto3" json:"FishermanMaxChains,omitempty"`
	FishermanUnstakingBlocks                 int32  `protobuf:"varint,17,opt,name=FishermanUnstakingBlocks,proto3" json:"FishermanUnstakingBlocks,omitempty"`
	FishermanMinimumPauseBlocks              int32  `protobuf:"varint,18,opt,name=FishermanMinimumPauseBlocks,proto3" json:"FishermanMinimumPauseBlocks,omitempty"`
	FishermanMaxPauseBlocks                  int32  `protobuf:"varint,19,opt,name=FishermanMaxPauseBlocks,proto3" json:"FishermanMaxPauseBlocks,omitempty"`
	ValidatorMinimumStake                    string `protobuf:"bytes,20,opt,name=ValidatorMinimumStake,proto3" json:"ValidatorMinimumStake,omitempty"`
	ValidatorUnstakingBlocks                 int32  `protobuf:"varint,21,opt,name=ValidatorUnstakingBlocks,proto3" json:"ValidatorUnstakingBlocks,omitempty"`
	ValidatorMinimumPauseBlocks              int32  `protobuf:"varint,22,opt,name=ValidatorMinimumPauseBlocks,proto3" json:"ValidatorMinimumPauseBlocks,omitempty"`
	ValidatorMaxPauseBlocks                  int32  `protobuf:"varint,23,opt,name=ValidatorMaxPauseBlocks,proto3" json:"ValidatorMaxPauseBlocks,omitempty"`
	ValidatorMaximumMissedBlocks             int32  `protobuf:"varint,24,opt,name=ValidatorMaximumMissedBlocks,proto3" json:"ValidatorMaximumMissedBlocks,omitempty"`
	ValidatorMaxEvidenceAgeInBlocks          int32  `protobuf:"varint,25,opt,name=ValidatorMaxEvidenceAgeInBlocks,proto3" json:"ValidatorMaxEvidenceAgeInBlocks,omitempty"`
	ProposerPercentageOfFees                 int32  `protobuf:"varint,26,opt,name=ProposerPercentageOfFees,proto3" json:"ProposerPercentageOfFees,omitempty"`
	MissedBlocksBurnPercentage               int32  `protobuf:"varint,27,opt,name=MissedBlocksBurnPercentage,proto3" json:"MissedBlocksBurnPercentage,omitempty"`
	DoubleSignBurnPercentage                 int32  `protobuf:"varint,28,opt,name=DoubleSignBurnPercentage,proto3" json:"DoubleSignBurnPercentage,omitempty"`
	MessageDoubleSignFee                     string `protobuf:"bytes,29,opt,name=MessageDoubleSignFee,proto3" json:"MessageDoubleSignFee,omitempty"`
	MessageSendFee                           string `protobuf:"bytes,30,opt,name=MessageSendFee,proto3" json:"MessageSendFee,omitempty"`
	MessageStakeFishermanFee                 string `protobuf:"bytes,31,opt,name=MessageStakeFishermanFee,proto3" json:"MessageStakeFishermanFee,omitempty"`
	MessageEditStakeFishermanFee             string `protobuf:"bytes,32,opt,name=MessageEditStakeFishermanFee,proto3" json:"MessageEditStakeFishermanFee,omitempty"`
	MessageUnstakeFishermanFee               string `protobuf:"bytes,33,opt,name=MessageUnstakeFishermanFee,proto3" json:"MessageUnstakeFishermanFee,omitempty"`
	MessagePauseFishermanFee                 string `protobuf:"bytes,34,opt,name=MessagePauseFishermanFee,proto3" json:"MessagePauseFishermanFee,omitempty"`
	MessageUnpauseFishermanFee               string `protobuf:"bytes,35,opt,name=MessageUnpauseFishermanFee,proto3" json:"MessageUnpauseFishermanFee,omitempty"`
	MessageFishermanPauseServiceNodeFee      string `protobuf:"bytes,36,opt,name=MessageFishermanPauseServiceNodeFee,proto3" json:"MessageFishermanPauseServiceNodeFee,omitempty"`
	MessageTestScoreFee                      string `protobuf:"bytes,37,opt,name=MessageTestScoreFee,proto3" json:"MessageTestScoreFee,omitempty"`
	MessageProveTestScoreFee                 string `protobuf:"bytes,38,opt,name=MessageProveTestScoreFee,proto3" json:"MessageProveTestScoreFee,omitempty"`
	MessageStakeAppFee                       string `protobuf:"bytes,39,opt,name=MessageStakeAppFee,proto3" json:"MessageStakeAppFee,omitempty"`
	MessageEditStakeAppFee                   string `protobuf:"bytes,40,opt,name=MessageEditStakeAppFee,proto3" json:"MessageEditStakeAppFee,omitempty"`
	MessageUnstakeAppFee                     string `protobuf:"bytes,41,opt,name=MessageUnstakeAppFee,proto3" json:"MessageUnstakeAppFee,omitempty"`
	MessagePauseAppFee                       string `protobuf:"bytes,42,opt,name=MessagePauseAppFee,proto3" json:"MessagePauseAppFee,omitempty"`
	MessageUnpauseAppFee                     string `protobuf:"bytes,43,opt,name=MessageUnpauseAppFee,proto3" json:"MessageUnpauseAppFee,omitempty"`
	MessageStakeValidatorFee                 string `protobuf:"bytes,44,opt,name=MessageStakeValidatorFee,proto3" json:"MessageStakeValidatorFee,omitempty"`
	MessageEditStakeValidatorFee             string `protobuf:"bytes,45,opt,name=MessageEditStakeValidatorFee,proto3" json:"MessageEditStakeValidatorFee,omitempty"`
	MessageUnstakeValidatorFee               string `protobuf:"bytes,46,opt,name=MessageUnstakeValidatorFee,proto3" json:"MessageUnstakeValidatorFee,omitempty"`
	MessagePauseValidatorFee                 string `protobuf:"bytes,47,opt,name=MessagePauseValidatorFee,proto3" json:"MessagePauseValidatorFee,omitempty"`
	MessageUnpauseValidatorFee               string `protobuf:"bytes,48,opt,name=MessageUnpauseValidatorFee,proto3" json:"MessageUnpauseValidatorFee,omitempty"`
	MessageStakeServiceNodeFee               string `protobuf:"bytes,49,opt,name=MessageStakeServiceNodeFee,proto3" json:"MessageStakeServiceNodeFee,omitempty"`
	MessageEditStakeServiceNodeFee           string `protobuf:"bytes,50,opt,name=MessageEditStakeServiceNodeFee,proto3" json:"MessageEditStakeServiceNodeFee,omitempty"`
	MessageUnstakeServiceNodeFee             string `protobuf:"bytes,51,opt,name=MessageUnstakeServiceNodeFee,proto3" json:"MessageUnstakeServiceNodeFee,omitempty"`
	MessagePauseServiceNodeFee               string `protobuf:"bytes,52,opt,name=MessagePauseServiceNodeFee,proto3" json:"MessagePauseServiceNodeFee,omitempty"`
	MessageUnpauseServiceNodeFee             string `protobuf:"bytes,53,opt,name=MessageUnpauseServiceNodeFee,proto3" json:"MessageUnpauseServiceNodeFee,omitempty"`
	MessageChangeParameterFee                string `protobuf:"bytes,54,opt,name=MessageChangeParameterFee,proto3" json:"MessageChangeParameterFee,omitempty"`
	ACLOwner                                 []byte `protobuf:"bytes,55,opt,name=ACLOwner,proto3" json:"ACLOwner,omitempty"`
	BlocksPerSessionOwner                    []byte `protobuf:"bytes,56,opt,name=BlocksPerSessionOwner,proto3" json:"BlocksPerSessionOwner,omitempty"`
	AppMinimumStakeOwner                     []byte `protobuf:"bytes,57,opt,name=AppMinimumStakeOwner,proto3" json:"AppMinimumStakeOwner,omitempty"`
	AppMaxChainsOwner                        []byte `protobuf:"bytes,58,opt,name=AppMaxChainsOwner,proto3" json:"AppMaxChainsOwner,omitempty"`
	AppBaselineStakeRateOwner                []byte `protobuf:"bytes,59,opt,name=AppBaselineStakeRateOwner,proto3" json:"AppBaselineStakeRateOwner,omitempty"`
	AppStakingAdjustmentOwner                []byte `protobuf:"bytes,60,opt,name=AppStakingAdjustmentOwner,proto3" json:"AppStakingAdjustmentOwner,omitempty"`
	AppUnstakingBlocksOwner                  []byte `protobuf:"bytes,61,opt,name=AppUnstakingBlocksOwner,proto3" json:"AppUnstakingBlocksOwner,omitempty"`
	AppMinimumPauseBlocksOwner               []byte `protobuf:"bytes,62,opt,name=AppMinimumPauseBlocksOwner,proto3" json:"AppMinimumPauseBlocksOwner,omitempty"`
	AppMaxPausedBlocksOwner                  []byte `protobuf:"bytes,63,opt,name=AppMaxPausedBlocksOwner,proto3" json:"AppMaxPausedBlocksOwner,omitempty"`
	ServiceNodeMinimumStakeOwner             []byte `protobuf:"bytes,64,opt,name=ServiceNodeMinimumStakeOwner,proto3" json:"ServiceNodeMinimumStakeOwner,omitempty"`
	ServiceNodeMaxChainsOwner                []byte `protobuf:"bytes,65,opt,name=ServiceNodeMaxChainsOwner,proto3" json:"ServiceNodeMaxChainsOwner,omitempty"`
	ServiceNodeUnstakingBlocksOwner          []byte `protobuf:"bytes,66,opt,name=ServiceNodeUnstakingBlocksOwner,proto3" json:"ServiceNodeUnstakingBlocksOwner,omitempty"`
	ServiceNodeMinimumPauseBlocksOwner       []byte `protobuf:"bytes,67,opt,name=ServiceNodeMinimumPauseBlocksOwner,proto3" json:"ServiceNodeMinimumPauseBlocksOwner,omitempty"`
	ServiceNodeMaxPausedBlocksOwner          []byte `protobuf:"bytes,68,opt,name=ServiceNodeMaxPausedBlocksOwner,proto3" json:"ServiceNodeMaxPausedBlocksOwner,omitempty"`
	ServiceNodesPerSessionOwner              []byte `protobuf:"bytes,69,opt,name=ServiceNodesPerSessionOwner,proto3" json:"ServiceNodesPerSessionOwner,omitempty"`
	ParamFishermanMinimumStakeOwner          []byte `protobuf:"bytes,70,opt,name=ParamFishermanMinimumStakeOwner,proto3" json:"ParamFishermanMinimumStakeOwner,omitempty"`
	FishermanMaxChainsOwner                  []byte `protobuf:"bytes,71,opt,name=FishermanMaxChainsOwner,proto3" json:"FishermanMaxChainsOwner,omitempty"`
	FishermanUnstakingBlocksOwner            []byte `protobuf:"bytes,72,opt,name=FishermanUnstakingBlocksOwner,proto3" json:"FishermanUnstakingBlocksOwner,omitempty"`
	FishermanMinimumPauseBlocksOwner         []byte `protobuf:"bytes,73,opt,name=FishermanMinimumPauseBlocksOwner,proto3" json:"FishermanMinimumPauseBlocksOwner,omitempty"`
	FishermanMaxPausedBlocksOwner            []byte `protobuf:"bytes,74,opt,name=FishermanMaxPausedBlocksOwner,proto3" json:"FishermanMaxPausedBlocksOwner,omitempty"`
	ValidatorMinimumStakeOwner               []byte `protobuf:"bytes,75,opt,name=ValidatorMinimumStakeOwner,proto3" json:"ValidatorMinimumStakeOwner,omitempty"`
	ValidatorUnstakingBlocksOwner            []byte `protobuf:"bytes,76,opt,name=ValidatorUnstakingBlocksOwner,proto3" json:"ValidatorUnstakingBlocksOwner,omitempty"`
	ValidatorMinimumPauseBlocksOwner         []byte `protobuf:"bytes,77,opt,name=ValidatorMinimumPauseBlocksOwner,proto3" json:"ValidatorMinimumPauseBlocksOwner,omitempty"`
	ValidatorMaxPausedBlocksOwner            []byte `protobuf:"bytes,78,opt,name=ValidatorMaxPausedBlocksOwner,proto3" json:"ValidatorMaxPausedBlocksOwner,omitempty"`
	ValidatorMaximumMissedBlocksOwner        []byte `protobuf:"bytes,79,opt,name=ValidatorMaximumMissedBlocksOwner,proto3" json:"ValidatorMaximumMissedBlocksOwner,omitempty"`
	ValidatorMaxEvidenceAgeInBlocksOwner     []byte `protobuf:"bytes,80,opt,name=ValidatorMaxEvidenceAgeInBlocksOwner,proto3" json:"ValidatorMaxEvidenceAgeInBlocksOwner,omitempty"`
	ProposerPercentageOfFeesOwner            []byte `protobuf:"bytes,81,opt,name=ProposerPercentageOfFeesOwner,proto3" json:"ProposerPercentageOfFeesOwner,omitempty"`
	MissedBlocksBurnPercentageOwner          []byte `protobuf:"bytes,82,opt,name=MissedBlocksBurnPercentageOwner,proto3" json:"MissedBlocksBurnPercentageOwner,omitempty"`
	DoubleSignBurnPercentageOwner            []byte `protobuf:"bytes,83,opt,name=DoubleSignBurnPercentageOwner,proto3" json:"DoubleSignBurnPercentageOwner,omitempty"`
	MessageDoubleSignFeeOwner                []byte `protobuf:"bytes,84,opt,name=MessageDoubleSignFeeOwner,proto3" json:"MessageDoubleSignFeeOwner,omitempty"`
	MessageSendFeeOwner                      []byte `protobuf:"bytes,85,opt,name=MessageSendFeeOwner,proto3" json:"MessageSendFeeOwner,omitempty"`
	MessageStakeFishermanFeeOwner            []byte `protobuf:"bytes,86,opt,name=MessageStakeFishermanFeeOwner,proto3" json:"MessageStakeFishermanFeeOwner,omitempty"`
	MessageEditStakeFishermanFeeOwner        []byte `protobuf:"bytes,87,opt,name=MessageEditStakeFishermanFeeOwner,proto3" json:"MessageEditStakeFishermanFeeOwner,omitempty"`
	MessageUnstakeFishermanFeeOwner          []byte `protobuf:"bytes,88,opt,name=MessageUnstakeFishermanFeeOwner,proto3" json:"MessageUnstakeFishermanFeeOwner,omitempty"`
	MessagePauseFishermanFeeOwner            []byte `protobuf:"bytes,89,opt,name=MessagePauseFishermanFeeOwner,proto3" json:"MessagePauseFishermanFeeOwner,omitempty"`
	MessageUnpauseFishermanFeeOwner          []byte `protobuf:"bytes,90,opt,name=MessageUnpauseFishermanFeeOwner,proto3" json:"MessageUnpauseFishermanFeeOwner,omitempty"`
	MessageFishermanPauseServiceNodeFeeOwner []byte `protobuf:"bytes,91,opt,name=MessageFishermanPauseServiceNodeFeeOwner,proto3" json:"MessageFishermanPauseServiceNodeFeeOwner,omitempty"`
	MessageTestScoreFeeOwner                 []byte `protobuf:"bytes,92,opt,name=MessageTestScoreFeeOwner,proto3" json:"MessageTestScoreFeeOwner,omitempty"`
	MessageProveTestScoreFeeOwner            []byte `protobuf:"bytes,93,opt,name=MessageProveTestScoreFeeOwner,proto3" json:"MessageProveTestScoreFeeOwner,omitempty"`
	MessageStakeAppFeeOwner                  []byte `protobuf:"bytes,94,opt,name=MessageStakeAppFeeOwner,proto3" json:"MessageStakeAppFeeOwner,omitempty"`
	MessageEditStakeAppFeeOwner              []byte `protobuf:"bytes,95,opt,name=MessageEditStakeAppFeeOwner,proto3" json:"MessageEditStakeAppFeeOwner,omitempty"`
	MessageUnstakeAppFeeOwner                []byte `protobuf:"bytes,96,opt,name=MessageUnstakeAppFeeOwner,proto3" json:"MessageUnstakeAppFeeOwner,omitempty"`
	MessagePauseAppFeeOwner                  []byte `protobuf:"bytes,97,opt,name=MessagePauseAppFeeOwner,proto3" json:"MessagePauseAppFeeOwner,omitempty"`
	MessageUnpauseAppFeeOwner                []byte `protobuf:"bytes,98,opt,name=MessageUnpauseAppFeeOwner,proto3" json:"MessageUnpauseAppFeeOwner,omitempty"`
	MessageStakeValidatorFeeOwner            []byte `protobuf:"bytes,99,opt,name=MessageStakeValidatorFeeOwner,proto3" json:"MessageStakeValidatorFeeOwner,omitempty"`
	MessageEditStakeValidatorFeeOwner        []byte `protobuf:"bytes,100,opt,name=MessageEditStakeValidatorFeeOwner,proto3" json:"MessageEditStakeValidatorFeeOwner,omitempty"`
	MessageUnstakeValidatorFeeOwner          []byte `protobuf:"bytes,101,opt,name=MessageUnstakeValidatorFeeOwner,proto3" json:"MessageUnstakeValidatorFeeOwner,omitempty"`
	MessagePauseValidatorFeeOwner            []byte `protobuf:"bytes,102,opt,name=MessagePauseValidatorFeeOwner,proto3" json:"MessagePauseValidatorFeeOwner,omitempty"`
	MessageUnpauseValidatorFeeOwner          []byte `protobuf:"bytes,103,opt,name=MessageUnpauseValidatorFeeOwner,proto3" json:"MessageUnpauseValidatorFeeOwner,omitempty"`
	MessageStakeServiceNodeFeeOwner          []byte `protobuf:"bytes,104,opt,name=MessageStakeServiceNodeFeeOwner,proto3" json:"MessageStakeServiceNodeFeeOwner,omitempty"`
	MessageEditStakeServiceNodeFeeOwner      []byte `protobuf:"bytes,105,opt,name=MessageEditStakeServiceNodeFeeOwner,proto3" json:"MessageEditStakeServiceNodeFeeOwner,omitempty"`
	MessageUnstakeServiceNodeFeeOwner        []byte `protobuf:"bytes,106,opt,name=MessageUnstakeServiceNodeFeeOwner,proto3" json:"MessageUnstakeServiceNodeFeeOwner,omitempty"`
	MessagePauseServiceNodeFeeOwner          []byte `protobuf:"bytes,107,opt,name=MessagePauseServiceNodeFeeOwner,proto3" json:"MessagePauseServiceNodeFeeOwner,omitempty"`
	MessageUnpauseServiceNodeFeeOwner        []byte `protobuf:"bytes,108,opt,name=MessageUnpauseServiceNodeFeeOwner,proto3" json:"MessageUnpauseServiceNodeFeeOwner,omitempty"`
	MessageChangeParameterFeeOwner           []byte `protobuf:"bytes,109,opt,name=MessageChangeParameterFeeOwner,proto3" json:"MessageChangeParameterFeeOwner,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetBlocksPerSession() int32 {
	if x != nil {
		return x.BlocksPerSession
	}
	return 0
}

func (x *Params) GetAppMinimumStake() string {
	if x != nil {
		return x.AppMinimumStake
	}
	return ""
}

func (x *Params) GetAppMaxChains() int32 {
	if x != nil {
		return x.AppMaxChains
	}
	return 0
}

func (x *Params) GetAppBaselineStakeRate() int32 {
	if x != nil {
		return x.AppBaselineStakeRate
	}
	return 0
}

func (x *Params) GetAppStakingAdjustment() int32 {
	if x != nil {
		return x.AppStakingAdjustment
	}
	return 0
}

func (x *Params) GetAppUnstakingBlocks() int32 {
	if x != nil {
		return x.AppUnstakingBlocks
	}
	return 0
}

func (x *Params) GetAppMinimumPauseBlocks() int32 {
	if x != nil {
		return x.AppMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetAppMaxPauseBlocks() int32 {
	if x != nil {
		return x.AppMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetServiceNodeMinimumStake() string {
	if x != nil {
		return x.ServiceNodeMinimumStake
	}
	return ""
}

func (x *Params) GetServiceNodeMaxChains() int32 {
	if x != nil {
		return x.ServiceNodeMaxChains
	}
	return 0
}

func (x *Params) GetServiceNodeUnstakingBlocks() int32 {
	if x != nil {
		return x.ServiceNodeUnstakingBlocks
	}
	return 0
}

func (x *Params) GetServiceNodeMinimumPauseBlocks() int32 {
	if x != nil {
		return x.ServiceNodeMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetServiceNodeMaxPauseBlocks() int32 {
	if x != nil {
		return x.ServiceNodeMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetServiceNodesPerSession() int32 {
	if x != nil {
		return x.ServiceNodesPerSession
	}
	return 0
}

func (x *Params) GetFishermanMinimumStake() string {
	if x != nil {
		return x.FishermanMinimumStake
	}
	return ""
}

func (x *Params) GetFishermanMaxChains() int32 {
	if x != nil {
		return x.FishermanMaxChains
	}
	return 0
}

func (x *Params) GetFishermanUnstakingBlocks() int32 {
	if x != nil {
		return x.FishermanUnstakingBlocks
	}
	return 0
}

func (x *Params) GetFishermanMinimumPauseBlocks() int32 {
	if x != nil {
		return x.FishermanMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetFishermanMaxPauseBlocks() int32 {
	if x != nil {
		return x.FishermanMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetValidatorMinimumStake() string {
	if x != nil {
		return x.ValidatorMinimumStake
	}
	return ""
}

func (x *Params) GetValidatorUnstakingBlocks() int32 {
	if x != nil {
		return x.ValidatorUnstakingBlocks
	}
	return 0
}

func (x *Params) GetValidatorMinimumPauseBlocks() int32 {
	if x != nil {
		return x.ValidatorMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaxPauseBlocks() int32 {
	if x != nil {
		return x.ValidatorMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaximumMissedBlocks() int32 {
	if x != nil {
		return x.ValidatorMaximumMissedBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaxEvidenceAgeInBlocks() int32 {
	if x != nil {
		return x.ValidatorMaxEvidenceAgeInBlocks
	}
	return 0
}

func (x *Params) GetProposerPercentageOfFees() int32 {
	if x != nil {
		return x.ProposerPercentageOfFees
	}
	return 0
}

func (x *Params) GetMissedBlocksBurnPercentage() int32 {
	if x != nil {
		return x.MissedBlocksBurnPercentage
	}
	return 0
}

func (x *Params) GetDoubleSignBurnPercentage() int32 {
	if x != nil {
		return x.DoubleSignBurnPercentage
	}
	return 0
}

func (x *Params) GetMessageDoubleSignFee() string {
	if x != nil {
		return x.MessageDoubleSignFee
	}
	return ""
}

func (x *Params) GetMessageSendFee() string {
	if x != nil {
		return x.MessageSendFee
	}
	return ""
}

func (x *Params) GetMessageStakeFishermanFee() string {
	if x != nil {
		return x.MessageStakeFishermanFee
	}
	return ""
}

func (x *Params) GetMessageEditStakeFishermanFee() string {
	if x != nil {
		return x.MessageEditStakeFishermanFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeFishermanFee() string {
	if x != nil {
		return x.MessageUnstakeFishermanFee
	}
	return ""
}

func (x *Params) GetMessagePauseFishermanFee() string {
	if x != nil {
		return x.MessagePauseFishermanFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseFishermanFee() string {
	if x != nil {
		return x.MessageUnpauseFishermanFee
	}
	return ""
}

func (x *Params) GetMessageFishermanPauseServiceNodeFee() string {
	if x != nil {
		return x.MessageFishermanPauseServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageTestScoreFee() string {
	if x != nil {
		return x.MessageTestScoreFee
	}
	return ""
}

func (x *Params) GetMessageProveTestScoreFee() string {
	if x != nil {
		return x.MessageProveTestScoreFee
	}
	return ""
}

func (x *Params) GetMessageStakeAppFee() string {
	if x != nil {
		return x.MessageStakeAppFee
	}
	return ""
}

func (x *Params) GetMessageEditStakeAppFee() string {
	if x != nil {
		return x.MessageEditStakeAppFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeAppFee() string {
	if x != nil {
		return x.MessageUnstakeAppFee
	}
	return ""
}

func (x *Params) GetMessagePauseAppFee() string {
	if x != nil {
		return x.MessagePauseAppFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseAppFee() string {
	if x != nil {
		return x.MessageUnpauseAppFee
	}
	return ""
}

func (x *Params) GetMessageStakeValidatorFee() string {
	if x != nil {
		return x.MessageStakeValidatorFee
	}
	return ""
}

func (x *Params) GetMessageEditStakeValidatorFee() string {
	if x != nil {
		return x.MessageEditStakeValidatorFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeValidatorFee() string {
	if x != nil {
		return x.MessageUnstakeValidatorFee
	}
	return ""
}

func (x *Params) GetMessagePauseValidatorFee() string {
	if x != nil {
		return x.MessagePauseValidatorFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseValidatorFee() string {
	if x != nil {
		return x.MessageUnpauseValidatorFee
	}
	return ""
}

func (x *Params) GetMessageStakeServiceNodeFee() string {
	if x != nil {
		return x.MessageStakeServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageEditStakeServiceNodeFee() string {
	if x != nil {
		return x.MessageEditStakeServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeServiceNodeFee() string {
	if x != nil {
		return x.MessageUnstakeServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessagePauseServiceNodeFee() string {
	if x != nil {
		return x.MessagePauseServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseServiceNodeFee() string {
	if x != nil {
		return x.MessageUnpauseServiceNodeFee
	}
	return ""
}

func (x *Params) GetMessageChangeParameterFee() string {
	if x != nil {
		return x.MessageChangeParameterFee
	}
	return ""
}

func (x *Params) GetACLOwner() []byte {
	if x != nil {
		return x.ACLOwner
	}
	return nil
}

func (x *Params) GetBlocksPerSessionOwner() []byte {
	if x != nil {
		return x.BlocksPerSessionOwner
	}
	return nil
}

func (x *Params) GetAppMinimumStakeOwner() []byte {
	if x != nil {
		return x.AppMinimumStakeOwner
	}
	return nil
}

func (x *Params) GetAppMaxChainsOwner() []byte {
	if x != nil {
		return x.AppMaxChainsOwner
	}
	return nil
}

func (x *Params) GetAppBaselineStakeRateOwner() []byte {
	if x != nil {
		return x.AppBaselineStakeRateOwner
	}
	return nil
}

func (x *Params) GetAppStakingAdjustmentOwner() []byte {
	if x != nil {
		return x.AppStakingAdjustmentOwner
	}
	return nil
}

func (x *Params) GetAppUnstakingBlocksOwner() []byte {
	if x != nil {
		return x.AppUnstakingBlocksOwner
	}
	return nil
}

func (x *Params) GetAppMinimumPauseBlocksOwner() []byte {
	if x != nil {
		return x.AppMinimumPauseBlocksOwner
	}
	return nil
}

func (x *Params) GetAppMaxPausedBlocksOwner() []byte {
	if x != nil {
		return x.AppMaxPausedBlocksOwner
	}
	return nil
}

func (x *Params) GetServiceNodeMinimumStakeOwner() []byte {
	if x != nil {
		return x.ServiceNodeMinimumStakeOwner
	}
	return nil
}

func (x *Params) GetServiceNodeMaxChainsOwner() []byte {
	if x != nil {
		return x.ServiceNodeMaxChainsOwner
	}
	return nil
}

func (x *Params) GetServiceNodeUnstakingBlocksOwner() []byte {
	if x != nil {
		return x.ServiceNodeUnstakingBlocksOwner
	}
	return nil
}

func (x *Params) GetServiceNodeMinimumPauseBlocksOwner() []byte {
	if x != nil {
		return x.ServiceNodeMinimumPauseBlocksOwner
	}
	return nil
}

func (x *Params) GetServiceNodeMaxPausedBlocksOwner() []byte {
	if x != nil {
		return x.ServiceNodeMaxPausedBlocksOwner
	}
	return nil
}

func (x *Params) GetServiceNodesPerSessionOwner() []byte {
	if x != nil {
		return x.ServiceNodesPerSessionOwner
	}
	return nil
}

func (x *Params) GetParamFishermanMinimumStakeOwner() []byte {
	if x != nil {
		return x.ParamFishermanMinimumStakeOwner
	}
	return nil
}

func (x *Params) GetFishermanMaxChainsOwner() []byte {
	if x != nil {
		return x.FishermanMaxChainsOwner
	}
	return nil
}

func (x *Params) GetFishermanUnstakingBlocksOwner() []byte {
	if x != nil {
		return x.FishermanUnstakingBlocksOwner
	}
	return nil
}

func (x *Params) GetFishermanMinimumPauseBlocksOwner() []byte {
	if x != nil {
		return x.FishermanMinimumPauseBlocksOwner
	}
	return nil
}

func (x *Params) GetFishermanMaxPausedBlocksOwner() []byte {
	if x != nil {
		return x.FishermanMaxPausedBlocksOwner
	}
	return nil
}

func (x *Params) GetValidatorMinimumStakeOwner() []byte {
	if x != nil {
		return x.ValidatorMinimumStakeOwner
	}
	return nil
}

func (x *Params) GetValidatorUnstakingBlocksOwner() []byte {
	if x != nil {
		return x.ValidatorUnstakingBlocksOwner
	}
	return nil
}

func (x *Params) GetValidatorMinimumPauseBlocksOwner() []byte {
	if x != nil {
		return x.ValidatorMinimumPauseBlocksOwner
	}
	return nil
}

func (x *Params) GetValidatorMaxPausedBlocksOwner() []byte {
	if x != nil {
		return x.ValidatorMaxPausedBlocksOwner
	}
	return nil
}

func (x *Params) GetValidatorMaximumMissedBlocksOwner() []byte {
	if x != nil {
		return x.ValidatorMaximumMissedBlocksOwner
	}
	return nil
}

func (x *Params) GetValidatorMaxEvidenceAgeInBlocksOwner() []byte {
	if x != nil {
		return x.ValidatorMaxEvidenceAgeInBlocksOwner
	}
	return nil
}

func (x *Params) GetProposerPercentageOfFeesOwner() []byte {
	if x != nil {
		return x.ProposerPercentageOfFeesOwner
	}
	return nil
}

func (x *Params) GetMissedBlocksBurnPercentageOwner() []byte {
	if x != nil {
		return x.MissedBlocksBurnPercentageOwner
	}
	return nil
}

func (x *Params) GetDoubleSignBurnPercentageOwner() []byte {
	if x != nil {
		return x.DoubleSignBurnPercentageOwner
	}
	return nil
}

func (x *Params) GetMessageDoubleSignFeeOwner() []byte {
	if x != nil {
		return x.MessageDoubleSignFeeOwner
	}
	return nil
}

func (x *Params) GetMessageSendFeeOwner() []byte {
	if x != nil {
		return x.MessageSendFeeOwner
	}
	return nil
}

func (x *Params) GetMessageStakeFishermanFeeOwner() []byte {
	if x != nil {
		return x.MessageStakeFishermanFeeOwner
	}
	return nil
}

func (x *Params) GetMessageEditStakeFishermanFeeOwner() []byte {
	if x != nil {
		return x.MessageEditStakeFishermanFeeOwner
	}
	return nil
}

func (x *Params) GetMessageUnstakeFishermanFeeOwner() []byte {
	if x != nil {
		return x.MessageUnstakeFishermanFeeOwner
	}
	return nil
}

func (x *Params) GetMessagePauseFishermanFeeOwner() []byte {
	if x != nil {
		return x.MessagePauseFishermanFeeOwner
	}
	return nil
}

func (x *Params) GetMessageUnpauseFishermanFeeOwner() []byte {
	if x != nil {
		return x.MessageUnpauseFishermanFeeOwner
	}
	return nil
}

func (x *Params) GetMessageFishermanPauseServiceNodeFeeOwner() []byte {
	if x != nil {
		return x.MessageFishermanPauseServiceNodeFeeOwner
	}
	return nil
}

func (x *Params) GetMessageTestScoreFeeOwner() []byte {
	if x != nil {
		return x.MessageTestScoreFeeOwner
	}
	return nil
}

func (x *Params) GetMessageProveTestScoreFeeOwner() []byte {
	if x != nil {
		return x.MessageProveTestScoreFeeOwner
	}
	return nil
}

func (x *Params) GetMessageStakeAppFeeOwner() []byte {
	if x != nil {
		return x.MessageStakeAppFeeOwner
	}
	return nil
}

func (x *Params) GetMessageEditStakeAppFeeOwner() []byte {
	if x != nil {
		return x.MessageEditStakeAppFeeOwner
	}
	return nil
}

func (x *Params) GetMessageUnstakeAppFeeOwner() []byte {
	if x != nil {
		return x.MessageUnstakeAppFeeOwner
	}
	return nil
}

func (x *Params) GetMessagePauseAppFeeOwner() []byte {
	if x != nil {
		return x.MessagePauseAppFeeOwner
	}
	return nil
}

func (x *Params) GetMessageUnpauseAppFeeOwner() []byte {
	if x != nil {
		return x.MessageUnpauseAppFeeOwner
	}
	return nil
}

func (x *Params) GetMessageStakeValidatorFeeOwner() []byte {
	if x != nil {
		return x.MessageStakeValidatorFeeOwner
	}
	return nil
}

func (x *Params) GetMessageEditStakeValidatorFeeOwner() []byte {
	if x != nil {
		return x.MessageEditStakeValidatorFeeOwner
	}
	return nil
}

func (x *Params) GetMessageUnstakeValidatorFeeOwner() []byte {
	if x != nil {
		return x.MessageUnstakeValidatorFeeOwner
	}
	return nil
}

func (x *Params) GetMessagePauseValidatorFeeOwner() []byte {
	if x != nil {
		return x.MessagePauseValidatorFeeOwner
	}
	return nil
}

func (x *Params) GetMessageUnpauseValidatorFeeOwner() []byte {
	if x != nil {
		return x.MessageUnpauseValidatorFeeOwner
	}
	return nil
}

func (x *Params) GetMessageStakeServiceNodeFeeOwner() []byte {
	if x != nil {
		return x.MessageStakeServiceNodeFeeOwner
	}
	return nil
}

func (x *Params) GetMessageEditStakeServiceNodeFeeOwner() []byte {
	if x != nil {
		return x.MessageEditStakeServiceNodeFeeOwner
	}
	return nil
}

func (x *Params) GetMessageUnstakeServiceNodeFeeOwner() []byte {
	if x != nil {
		return x.MessageUnstakeServiceNodeFeeOwner
	}
	return nil
}

func (x *Params) GetMessagePauseServiceNodeFeeOwner() []byte {
	if x != nil {
		return x.MessagePauseServiceNodeFeeOwner
	}
	return nil
}

func (x *Params) GetMessageUnpauseServiceNodeFeeOwner() []byte {
	if x != nil {
		return x.MessageUnpauseServiceNodeFeeOwner
	}
	return nil
}

func (x *Params) GetMessageChangeParameterFeeOwner() []byte {
	if x != nil {
		return x.MessageChangeParameterFeeOwner
	}
	return nil
}

var File_gov_proto protoreflect.FileDescriptor

var file_gov_proto_rawDesc = []byte{
	0x0a, 0x09, 0x67, 0x6f, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0xfa, 0x35, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x41,
	0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x78, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x70, 0x70,
	0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x41, 0x70, 0x70,
	0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x41, 0x70, 0x70, 0x42, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x41,
	0x70, 0x70, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x4d, 0x61,
	0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x15, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x40, 0x0a, 0x1b, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d,
	0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x40, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x38, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61,
	0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x48, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67,
	0x65, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f,
	0x66, 0x46, 0x65, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f,
	0x66, 0x46, 0x65, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x4d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a,
	0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x46,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46,
	0x65, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70,
	0x46, 0x65, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41,
	0x70, 0x70, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x41,
	0x70, 0x70, 0x46, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x46, 0x65, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x46, 0x65, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x42, 0x0a,
	0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x42, 0x0a, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x43, 0x4c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x41, 0x43, 0x4c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x70, 0x70,
	0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x42, 0x61,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x41, 0x70, 0x70, 0x42,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x41, 0x70, 0x70, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x1a, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1a, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x17, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17,
	0x41, 0x70, 0x70, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x22, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x22, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x46,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x46, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x46, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x46, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x20, 0x46, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x20, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x46, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x20, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x52, 0x0a, 0x24, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61,
	0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x24, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x46, 0x65, 0x65,
	0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4f, 0x66, 0x46, 0x65, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x21, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x28, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x28, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x73, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46,
	0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x5f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x61, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x41, 0x70, 0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70,
	0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x70,
	0x70, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x21, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x50, 0x0a, 0x23, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x23,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gov_proto_rawDescOnce sync.Once
	file_gov_proto_rawDescData = file_gov_proto_rawDesc
)

func file_gov_proto_rawDescGZIP() []byte {
	file_gov_proto_rawDescOnce.Do(func() {
		file_gov_proto_rawDescData = protoimpl.X.CompressGZIP(file_gov_proto_rawDescData)
	})
	return file_gov_proto_rawDescData
}

var file_gov_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gov_proto_goTypes = []interface{}{
	(*Params)(nil), // 0: utility.Params
}
var file_gov_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gov_proto_init() }
func file_gov_proto_init() {
	if File_gov_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gov_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gov_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gov_proto_goTypes,
		DependencyIndexes: file_gov_proto_depIdxs,
		MessageInfos:      file_gov_proto_msgTypes,
	}.Build()
	File_gov_proto = out.File
	file_gov_proto_rawDesc = nil
	file_gov_proto_goTypes = nil
	file_gov_proto_depIdxs = nil
}
